/*
 * Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */

namespace java.awt.@event
{


	/// <summary>
	/// A semantic event which indicates that an item was selected or deselected.
	/// This high-level event is generated by an ItemSelectable object (such as a
	/// List) when an item is selected or deselected by the user.
	/// The event is passed to every <code>ItemListener</code> object which
	/// registered to receive such events using the component's
	/// <code>addItemListener</code> method.
	/// <P>
	/// The object that implements the <code>ItemListener</code> interface gets
	/// this <code>ItemEvent</code> when the event occurs. The listener is
	/// spared the details of processing individual mouse movements and mouse
	/// clicks, and can instead process a "meaningful" (semantic) event like
	/// "item selected" or "item deselected".
	/// <para>
	/// An unspecified behavior will be caused if the {@code id} parameter
	/// of any particular {@code ItemEvent} instance is not
	/// in the range from {@code ITEM_FIRST} to {@code ITEM_LAST}.
	/// </para>
	/// <para>
	/// The {@code stateChange} of any {@code ItemEvent} instance takes one of the following
	/// values:
	///                     <ul>
	///                     <li> {@code ItemEvent.SELECTED}
	///                     <li> {@code ItemEvent.DESELECTED}
	///                     </ul>
	/// Assigning the value different from listed above will cause an unspecified behavior.
	/// 
	/// @author Carl Quinn
	/// 
	/// </para>
	/// </summary>
	/// <seealso cref= java.awt.ItemSelectable </seealso>
	/// <seealso cref= ItemListener </seealso>
	/// <seealso cref= <a href="https://docs.oracle.com/javase/tutorial/uiswing/events/itemlistener.html">Tutorial: Writing an Item Listener</a>
	/// 
	/// @since 1.1 </seealso>
	public class ItemEvent : AWTEvent
	{

		/// <summary>
		/// The first number in the range of ids used for item events.
		/// </summary>
		public const int ITEM_FIRST = 701;

		/// <summary>
		/// The last number in the range of ids used for item events.
		/// </summary>
		public const int ITEM_LAST = 701;

		/// <summary>
		/// This event id indicates that an item's state changed.
		/// </summary>
		public const int ITEM_STATE_CHANGED = ITEM_FIRST; //Event.LIST_SELECT

		/// <summary>
		/// This state-change value indicates that an item was selected.
		/// </summary>
		public const int SELECTED = 1;

		/// <summary>
		/// This state-change-value indicates that a selected item was deselected.
		/// </summary>
		public const int DESELECTED = 2;

		/// <summary>
		/// The item whose selection state has changed.
		/// 
		/// @serial </summary>
		/// <seealso cref= #getItem() </seealso>
		internal Object Item_Renamed;

		/// <summary>
		/// <code>stateChange</code> indicates whether the <code>item</code>
		/// was selected or deselected.
		/// 
		/// @serial </summary>
		/// <seealso cref= #getStateChange() </seealso>
		internal int StateChange_Renamed;

		/*
		 * JDK 1.1 serialVersionUID
		 */
		private const long SerialVersionUID = -608708132447206933L;

		/// <summary>
		/// Constructs an <code>ItemEvent</code> object.
		/// <para> This method throws an
		/// <code>IllegalArgumentException</code> if <code>source</code>
		/// is <code>null</code>.
		/// 
		/// </para>
		/// </summary>
		/// <param name="source"> The <code>ItemSelectable</code> object
		///               that originated the event </param>
		/// <param name="id">           The integer that identifies the event type.
		///                     For information on allowable values, see
		///                     the class description for <seealso cref="ItemEvent"/> </param>
		/// <param name="item">   An object -- the item affected by the event </param>
		/// <param name="stateChange">  An integer that indicates whether the item was
		///               selected or deselected.
		///                     For information on allowable values, see
		///                     the class description for <seealso cref="ItemEvent"/> </param>
		/// <exception cref="IllegalArgumentException"> if <code>source</code> is null </exception>
		/// <seealso cref= #getItemSelectable() </seealso>
		/// <seealso cref= #getID() </seealso>
		/// <seealso cref= #getStateChange() </seealso>
		public ItemEvent(ItemSelectable source, int id, Object item, int stateChange) : base(source, id)
		{
			this.Item_Renamed = item;
			this.StateChange_Renamed = stateChange;
		}

		/// <summary>
		/// Returns the originator of the event.
		/// </summary>
		/// <returns> the ItemSelectable object that originated the event. </returns>
		public virtual ItemSelectable ItemSelectable
		{
			get
			{
				return (ItemSelectable)Source_Renamed;
			}
		}

	   /// <summary>
	   /// Returns the item affected by the event.
	   /// </summary>
	   /// <returns> the item (object) that was affected by the event </returns>
		public virtual Object Item
		{
			get
			{
				return Item_Renamed;
			}
		}

	   /// <summary>
	   /// Returns the type of state change (selected or deselected).
	   /// </summary>
	   /// <returns> an integer that indicates whether the item was selected
	   ///         or deselected
	   /// </returns>
	   /// <seealso cref= #SELECTED </seealso>
	   /// <seealso cref= #DESELECTED </seealso>
		public virtual int StateChange
		{
			get
			{
				return StateChange_Renamed;
			}
		}

		/// <summary>
		/// Returns a parameter string identifying this item event.
		/// This method is useful for event-logging and for debugging.
		/// </summary>
		/// <returns> a string identifying the event and its attributes </returns>
		public override String ParamString()
		{
			String typeStr;
			switch (Id)
			{
			  case ITEM_STATE_CHANGED:
				  typeStr = "ITEM_STATE_CHANGED";
				  break;
			  default:
				  typeStr = "unknown type";
			  break;
			}

			String stateStr;
			switch (StateChange_Renamed)
			{
			  case SELECTED:
				  stateStr = "SELECTED";
				  break;
			  case DESELECTED:
				  stateStr = "DESELECTED";
				  break;
			  default:
				  stateStr = "unknown type";
			  break;
			}
			return typeStr + ",item=" + Item_Renamed + ",stateChange=" + stateStr;
		}

	}

}