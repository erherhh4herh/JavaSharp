using System;

/*
 * Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */

namespace java.awt.@event
{

	using AppContext = sun.awt.AppContext;
	using SunToolkit = sun.awt.SunToolkit;

	/// <summary>
	/// A low-level event which indicates that a Component has gained or lost the
	/// input focus. This low-level event is generated by a Component (such as a
	/// TextField). The event is passed to every <code>FocusListener</code> or
	/// <code>FocusAdapter</code> object which registered to receive such events
	/// using the Component's <code>addFocusListener</code> method. (<code>
	/// FocusAdapter</code> objects implement the <code>FocusListener</code>
	/// interface.) Each such listener object gets this <code>FocusEvent</code> when
	/// the event occurs.
	/// <para>
	/// There are two levels of focus events: permanent and temporary. Permanent
	/// focus change events occur when focus is directly moved from one Component to
	/// another, such as through a call to requestFocus() or as the user uses the
	/// TAB key to traverse Components. Temporary focus change events occur when
	/// focus is temporarily lost for a Component as the indirect result of another
	/// operation, such as Window deactivation or a Scrollbar drag. In this case,
	/// the original focus state will automatically be restored once that operation
	/// is finished, or, for the case of Window deactivation, when the Window is
	/// reactivated. Both permanent and temporary focus events are delivered using
	/// the FOCUS_GAINED and FOCUS_LOST event ids; the level may be distinguished in
	/// the event using the isTemporary() method.
	/// </para>
	/// <para>
	/// An unspecified behavior will be caused if the {@code id} parameter
	/// of any particular {@code FocusEvent} instance is not
	/// in the range from {@code FOCUS_FIRST} to {@code FOCUS_LAST}.
	/// 
	/// </para>
	/// </summary>
	/// <seealso cref= FocusAdapter </seealso>
	/// <seealso cref= FocusListener </seealso>
	/// <seealso cref= <a href="https://docs.oracle.com/javase/tutorial/uiswing/events/focuslistener.html">Tutorial: Writing a Focus Listener</a>
	/// 
	/// @author Carl Quinn
	/// @author Amy Fowler
	/// @since 1.1 </seealso>
	public class FocusEvent : ComponentEvent
	{

		/// <summary>
		/// The first number in the range of ids used for focus events.
		/// </summary>
		public const int FOCUS_FIRST = 1004;

		/// <summary>
		/// The last number in the range of ids used for focus events.
		/// </summary>
		public const int FOCUS_LAST = 1005;

		/// <summary>
		/// This event indicates that the Component is now the focus owner.
		/// </summary>
		public const int FOCUS_GAINED = FOCUS_FIRST; //Event.GOT_FOCUS

		/// <summary>
		/// This event indicates that the Component is no longer the focus owner.
		/// </summary>
		public static readonly int FOCUS_LOST = 1 + FOCUS_FIRST; //Event.LOST_FOCUS

		/// <summary>
		/// A focus event can have two different levels, permanent and temporary.
		/// It will be set to true if some operation takes away the focus
		/// temporarily and intends on getting it back once the event is completed.
		/// Otherwise it will be set to false.
		/// 
		/// @serial </summary>
		/// <seealso cref= #isTemporary </seealso>
		internal bool Temporary_Renamed;

		/// <summary>
		/// The other Component involved in this focus change. For a FOCUS_GAINED
		/// event, this is the Component that lost focus. For a FOCUS_LOST event,
		/// this is the Component that gained focus. If this focus change occurs
		/// with a native application, a Java application in a different VM, or with
		/// no other Component, then the opposite Component is null.
		/// </summary>
		/// <seealso cref= #getOppositeComponent
		/// @since 1.4 </seealso>
		[NonSerialized]
		internal Component Opposite;

		/*
		 * JDK 1.1 serialVersionUID
		 */
		private const long SerialVersionUID = 523753786457416396L;

		/// <summary>
		/// Constructs a <code>FocusEvent</code> object with the
		/// specified temporary state and opposite <code>Component</code>.
		/// The opposite <code>Component</code> is the other
		/// <code>Component</code> involved in this focus change.
		/// For a <code>FOCUS_GAINED</code> event, this is the
		/// <code>Component</code> that lost focus. For a
		/// <code>FOCUS_LOST</code> event, this is the <code>Component</code>
		/// that gained focus. If this focus change occurs with a native
		/// application, with a Java application in a different VM,
		/// or with no other <code>Component</code>, then the opposite
		/// <code>Component</code> is <code>null</code>.
		/// <para> This method throws an
		/// <code>IllegalArgumentException</code> if <code>source</code>
		/// is <code>null</code>.
		/// 
		/// </para>
		/// </summary>
		/// <param name="source">     The <code>Component</code> that originated the event </param>
		/// <param name="id">         An integer indicating the type of event.
		///                     For information on allowable values, see
		///                     the class description for <seealso cref="FocusEvent"/> </param>
		/// <param name="temporary">  Equals <code>true</code> if the focus change is temporary;
		///                   <code>false</code> otherwise </param>
		/// <param name="opposite">   The other Component involved in the focus change,
		///                   or <code>null</code> </param>
		/// <exception cref="IllegalArgumentException"> if <code>source</code> equals {@code null} </exception>
		/// <seealso cref= #getSource() </seealso>
		/// <seealso cref= #getID() </seealso>
		/// <seealso cref= #isTemporary() </seealso>
		/// <seealso cref= #getOppositeComponent()
		/// @since 1.4 </seealso>
		public FocusEvent(Component source, int id, bool temporary, Component opposite) : base(source, id)
		{
			this.Temporary_Renamed = temporary;
			this.Opposite = opposite;
		}

		/// <summary>
		/// Constructs a <code>FocusEvent</code> object and identifies
		/// whether or not the change is temporary.
		/// <para> This method throws an
		/// <code>IllegalArgumentException</code> if <code>source</code>
		/// is <code>null</code>.
		/// 
		/// </para>
		/// </summary>
		/// <param name="source">    The <code>Component</code> that originated the event </param>
		/// <param name="id">        An integer indicating the type of event.
		///                     For information on allowable values, see
		///                     the class description for <seealso cref="FocusEvent"/> </param>
		/// <param name="temporary"> Equals <code>true</code> if the focus change is temporary;
		///                  <code>false</code> otherwise </param>
		/// <exception cref="IllegalArgumentException"> if <code>source</code> equals {@code null} </exception>
		/// <seealso cref= #getSource() </seealso>
		/// <seealso cref= #getID() </seealso>
		/// <seealso cref= #isTemporary() </seealso>
		public FocusEvent(Component source, int id, bool temporary) : this(source, id, temporary, null)
		{
		}

		/// <summary>
		/// Constructs a <code>FocusEvent</code> object and identifies it
		/// as a permanent change in focus.
		/// <para> This method throws an
		/// <code>IllegalArgumentException</code> if <code>source</code>
		/// is <code>null</code>.
		/// 
		/// </para>
		/// </summary>
		/// <param name="source">    The <code>Component</code> that originated the event </param>
		/// <param name="id">        An integer indicating the type of event.
		///                     For information on allowable values, see
		///                     the class description for <seealso cref="FocusEvent"/> </param>
		/// <exception cref="IllegalArgumentException"> if <code>source</code> equals {@code null} </exception>
		/// <seealso cref= #getSource() </seealso>
		/// <seealso cref= #getID() </seealso>
		public FocusEvent(Component source, int id) : this(source, id, false)
		{
		}

		/// <summary>
		/// Identifies the focus change event as temporary or permanent.
		/// </summary>
		/// <returns> <code>true</code> if the focus change is temporary;
		///         <code>false</code> otherwise </returns>
		public virtual bool Temporary
		{
			get
			{
				return Temporary_Renamed;
			}
		}

		/// <summary>
		/// Returns the other Component involved in this focus change. For a
		/// FOCUS_GAINED event, this is the Component that lost focus. For a
		/// FOCUS_LOST event, this is the Component that gained focus. If this
		/// focus change occurs with a native application, with a Java application
		/// in a different VM or context, or with no other Component, then null is
		/// returned.
		/// </summary>
		/// <returns> the other Component involved in the focus change, or null
		/// @since 1.4 </returns>
		public virtual Component OppositeComponent
		{
			get
			{
				if (Opposite == null)
				{
					return null;
				}
    
				return (SunToolkit.targetToAppContext(Opposite) == AppContext.AppContext) ? Opposite : null;
			}
		}

		/// <summary>
		/// Returns a parameter string identifying this event.
		/// This method is useful for event-logging and for debugging.
		/// </summary>
		/// <returns> a string identifying the event and its attributes </returns>
		public override String ParamString()
		{
			String typeStr;
			switch (Id)
			{
			  case FOCUS_GAINED:
				  typeStr = "FOCUS_GAINED";
				  break;
			  case FOCUS_LOST:
				  typeStr = "FOCUS_LOST";
				  break;
			  default:
				  typeStr = "unknown type";
			  break;
			}
			return typeStr + (Temporary_Renamed ? ",temporary" : ",permanent") + ",opposite=" + OppositeComponent;
		}

	}

}