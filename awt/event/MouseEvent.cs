using System;
using System.Runtime.InteropServices;

/*
 * Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */

namespace java.awt.@event
{

	using SunToolkit = sun.awt.SunToolkit;

	/// <summary>
	/// An event which indicates that a mouse action occurred in a component.
	/// A mouse action is considered to occur in a particular component if and only
	/// if the mouse cursor is over the unobscured part of the component's bounds
	/// when the action happens.
	/// For lightweight components, such as Swing's components, mouse events
	/// are only dispatched to the component if the mouse event type has been
	/// enabled on the component. A mouse event type is enabled by adding the
	/// appropriate mouse-based {@code EventListener} to the component
	/// (<seealso cref="MouseListener"/> or <seealso cref="MouseMotionListener"/>), or by invoking
	/// <seealso cref="Component#enableEvents(long)"/> with the appropriate mask parameter
	/// ({@code AWTEvent.MOUSE_EVENT_MASK} or {@code AWTEvent.MOUSE_MOTION_EVENT_MASK}).
	/// If the mouse event type has not been enabled on the component, the
	/// corresponding mouse events are dispatched to the first ancestor that
	/// has enabled the mouse event type.
	/// <para>
	/// For example, if a {@code MouseListener} has been added to a component, or
	/// {@code enableEvents(AWTEvent.MOUSE_EVENT_MASK)} has been invoked, then all
	/// the events defined by {@code MouseListener} are dispatched to the component.
	/// On the other hand, if a {@code MouseMotionListener} has not been added and
	/// {@code enableEvents} has not been invoked with
	/// {@code AWTEvent.MOUSE_MOTION_EVENT_MASK}, then mouse motion events are not
	/// dispatched to the component. Instead the mouse motion events are
	/// dispatched to the first ancestors that has enabled mouse motion
	/// events.
	/// <P>
	/// This low-level event is generated by a component object for:
	/// <ul>
	/// <li>Mouse Events
	///     <ul>
	///     <li>a mouse button is pressed
	///     <li>a mouse button is released
	///     <li>a mouse button is clicked (pressed and released)
	///     <li>the mouse cursor enters the unobscured part of component's geometry
	///     <li>the mouse cursor exits the unobscured part of component's geometry
	///     </ul>
	/// <li> Mouse Motion Events
	///     <ul>
	///     <li>the mouse is moved
	///     <li>the mouse is dragged
	///     </ul>
	/// </ul>
	/// <P>
	/// A <code>MouseEvent</code> object is passed to every
	/// <code>MouseListener</code>
	/// or <code>MouseAdapter</code> object which is registered to receive
	/// the "interesting" mouse events using the component's
	/// <code>addMouseListener</code> method.
	/// (<code>MouseAdapter</code> objects implement the
	/// <code>MouseListener</code> interface.) Each such listener object
	/// gets a <code>MouseEvent</code> containing the mouse event.
	/// <P>
	/// A <code>MouseEvent</code> object is also passed to every
	/// <code>MouseMotionListener</code> or
	/// <code>MouseMotionAdapter</code> object which is registered to receive
	/// mouse motion events using the component's
	/// <code>addMouseMotionListener</code>
	/// method. (<code>MouseMotionAdapter</code> objects implement the
	/// <code>MouseMotionListener</code> interface.) Each such listener object
	/// gets a <code>MouseEvent</code> containing the mouse motion event.
	/// <P>
	/// When a mouse button is clicked, events are generated and sent to the
	/// registered <code>MouseListener</code>s.
	/// The state of modal keys can be retrieved using <seealso cref="InputEvent#getModifiers"/>
	/// and <seealso cref="InputEvent#getModifiersEx"/>.
	/// The button mask returned by <seealso cref="InputEvent#getModifiers"/> reflects
	/// only the button that changed state, not the current state of all buttons.
	/// (Note: Due to overlap in the values of ALT_MASK/BUTTON2_MASK and
	/// META_MASK/BUTTON3_MASK, this is not always true for mouse events involving
	/// modifier keys).
	/// To get the state of all buttons and modifier keys, use
	/// <seealso cref="InputEvent#getModifiersEx"/>.
	/// The button which has changed state is returned by <seealso cref="MouseEvent#getButton"/>
	/// <P>
	/// For example, if the first mouse button is pressed, events are sent in the
	/// following order:
	/// <PRE>
	///    <b   >id           </b   >   <b   >modifiers   </b   > <b   >button </b   >
	///    <code>MOUSE_PRESSED</code>:  <code>BUTTON1_MASK</code> <code>BUTTON1</code>
	///    <code>MOUSE_RELEASED</code>: <code>BUTTON1_MASK</code> <code>BUTTON1</code>
	///    <code>MOUSE_CLICKED</code>:  <code>BUTTON1_MASK</code> <code>BUTTON1</code>
	/// </PRE>
	/// When multiple mouse buttons are pressed, each press, release, and click
	/// results in a separate event.
	/// <P>
	/// For example, if the user presses <b>button 1</b> followed by
	/// <b>button 2</b>, and then releases them in the same order,
	/// the following sequence of events is generated:
	/// <PRE>
	///    <b   >id           </b   >   <b   >modifiers   </b   > <b   >button </b   >
	///    <code>MOUSE_PRESSED</code>:  <code>BUTTON1_MASK</code> <code>BUTTON1</code>
	///    <code>MOUSE_PRESSED</code>:  <code>BUTTON2_MASK</code> <code>BUTTON2</code>
	///    <code>MOUSE_RELEASED</code>: <code>BUTTON1_MASK</code> <code>BUTTON1</code>
	///    <code>MOUSE_CLICKED</code>:  <code>BUTTON1_MASK</code> <code>BUTTON1</code>
	///    <code>MOUSE_RELEASED</code>: <code>BUTTON2_MASK</code> <code>BUTTON2</code>
	///    <code>MOUSE_CLICKED</code>:  <code>BUTTON2_MASK</code> <code>BUTTON2</code>
	/// </PRE>
	/// If <b>button 2</b> is released first, the
	/// <code>MOUSE_RELEASED</code>/<code>MOUSE_CLICKED</code> pair
	/// for <code>BUTTON2_MASK</code> arrives first,
	/// followed by the pair for <code>BUTTON1_MASK</code>.
	/// </para>
	/// <para>
	/// Some extra mouse buttons are added to extend the standard set of buttons
	/// represented by the following constants:{@code BUTTON1}, {@code BUTTON2}, and {@code BUTTON3}.
	/// Extra buttons have no assigned {@code BUTTONx}
	/// constants as well as their button masks have no assigned {@code BUTTONx_DOWN_MASK}
	/// constants. Nevertheless, ordinal numbers starting from 4 may be
	/// used as button numbers (button ids). Values obtained by the
	/// <seealso cref="InputEvent#getMaskForButton(int) getMaskForButton(button)"/> method may be used
	/// as button masks.
	/// </para>
	/// <para>
	/// {@code MOUSE_DRAGGED} events are delivered to the {@code Component}
	/// in which the mouse button was pressed until the mouse button is released
	/// (regardless of whether the mouse position is within the bounds of the
	/// {@code Component}).  Due to platform-dependent Drag&amp;Drop implementations,
	/// {@code MOUSE_DRAGGED} events may not be delivered during a native
	/// Drag&amp;Drop operation.
	/// 
	/// In a multi-screen environment mouse drag events are delivered to the
	/// <code>Component</code> even if the mouse position is outside the bounds of the
	/// <code>GraphicsConfiguration</code> associated with that
	/// <code>Component</code>. However, the reported position for mouse drag events
	/// in this case may differ from the actual mouse position:
	/// <ul>
	/// <li>In a multi-screen environment without a virtual device:
	/// <br>
	/// The reported coordinates for mouse drag events are clipped to fit within the
	/// bounds of the <code>GraphicsConfiguration</code> associated with
	/// the <code>Component</code>.
	/// <li>In a multi-screen environment with a virtual device:
	/// <br>
	/// The reported coordinates for mouse drag events are clipped to fit within the
	/// bounds of the virtual device associated with the <code>Component</code>.
	/// </ul>
	/// </para>
	/// <para>
	/// An unspecified behavior will be caused if the {@code id} parameter
	/// of any particular {@code MouseEvent} instance is not
	/// in the range from {@code MOUSE_FIRST} to {@code MOUSE_LAST}-1
	/// ({@code MOUSE_WHEEL} is not acceptable).
	/// 
	/// @author Carl Quinn
	/// 
	/// </para>
	/// </summary>
	/// <seealso cref= MouseAdapter </seealso>
	/// <seealso cref= MouseListener </seealso>
	/// <seealso cref= MouseMotionAdapter </seealso>
	/// <seealso cref= MouseMotionListener </seealso>
	/// <seealso cref= MouseWheelListener </seealso>
	/// <seealso cref= <a href="https://docs.oracle.com/javase/tutorial/uiswing/events/mouselistener.html">Tutorial: Writing a Mouse Listener</a> </seealso>
	/// <seealso cref= <a href="https://docs.oracle.com/javase/tutorial/uiswing/events/mousemotionlistener.html">Tutorial: Writing a Mouse Motion Listener</a>
	/// 
	/// @since 1.1 </seealso>
	public class MouseEvent : InputEvent
	{

		/// <summary>
		/// The first number in the range of ids used for mouse events.
		/// </summary>
		public const int MOUSE_FIRST = 500;

		/// <summary>
		/// The last number in the range of ids used for mouse events.
		/// </summary>
		public const int MOUSE_LAST = 507;

		/// <summary>
		/// The "mouse clicked" event. This <code>MouseEvent</code>
		/// occurs when a mouse button is pressed and released.
		/// </summary>
		public const int MOUSE_CLICKED = MOUSE_FIRST;

		/// <summary>
		/// The "mouse pressed" event. This <code>MouseEvent</code>
		/// occurs when a mouse button is pushed down.
		/// </summary>
		public static readonly int MOUSE_PRESSED = 1 + MOUSE_FIRST; //Event.MOUSE_DOWN

		/// <summary>
		/// The "mouse released" event. This <code>MouseEvent</code>
		/// occurs when a mouse button is let up.
		/// </summary>
		public static readonly int MOUSE_RELEASED = 2 + MOUSE_FIRST; //Event.MOUSE_UP

		/// <summary>
		/// The "mouse moved" event. This <code>MouseEvent</code>
		/// occurs when the mouse position changes.
		/// </summary>
		public static readonly int MOUSE_MOVED = 3 + MOUSE_FIRST; //Event.MOUSE_MOVE

		/// <summary>
		/// The "mouse entered" event. This <code>MouseEvent</code>
		/// occurs when the mouse cursor enters the unobscured part of component's
		/// geometry.
		/// </summary>
		public static readonly int MOUSE_ENTERED = 4 + MOUSE_FIRST; //Event.MOUSE_ENTER

		/// <summary>
		/// The "mouse exited" event. This <code>MouseEvent</code>
		/// occurs when the mouse cursor exits the unobscured part of component's
		/// geometry.
		/// </summary>
		public static readonly int MOUSE_EXITED = 5 + MOUSE_FIRST; //Event.MOUSE_EXIT

		/// <summary>
		/// The "mouse dragged" event. This <code>MouseEvent</code>
		/// occurs when the mouse position changes while a mouse button is pressed.
		/// </summary>
		public static readonly int MOUSE_DRAGGED = 6 + MOUSE_FIRST; //Event.MOUSE_DRAG

		/// <summary>
		/// The "mouse wheel" event.  This is the only <code>MouseWheelEvent</code>.
		/// It occurs when a mouse equipped with a wheel has its wheel rotated.
		/// @since 1.4
		/// </summary>
		public static readonly int MOUSE_WHEEL = 7 + MOUSE_FIRST;

		/// <summary>
		/// Indicates no mouse buttons; used by <seealso cref="#getButton"/>.
		/// @since 1.4
		/// </summary>
		public const int NOBUTTON = 0;

		/// <summary>
		/// Indicates mouse button #1; used by <seealso cref="#getButton"/>.
		/// @since 1.4
		/// </summary>
		public const int BUTTON1 = 1;

		/// <summary>
		/// Indicates mouse button #2; used by <seealso cref="#getButton"/>.
		/// @since 1.4
		/// </summary>
		public const int BUTTON2 = 2;

		/// <summary>
		/// Indicates mouse button #3; used by <seealso cref="#getButton"/>.
		/// @since 1.4
		/// </summary>
		public const int BUTTON3 = 3;

		/// <summary>
		/// The mouse event's x coordinate.
		/// The x value is relative to the component that fired the event.
		/// 
		/// @serial </summary>
		/// <seealso cref= #getX() </seealso>
		internal int x;

		/// <summary>
		/// The mouse event's y coordinate.
		/// The y value is relative to the component that fired the event.
		/// 
		/// @serial </summary>
		/// <seealso cref= #getY() </seealso>
		internal int y;

		/// <summary>
		/// The mouse event's x absolute coordinate.
		/// In a virtual device multi-screen environment in which the
		/// desktop area could span multiple physical screen devices,
		/// this coordinate is relative to the virtual coordinate system.
		/// Otherwise, this coordinate is relative to the coordinate system
		/// associated with the Component's GraphicsConfiguration.
		/// 
		/// @serial
		/// </summary>
		private int XAbs;

		/// <summary>
		/// The mouse event's y absolute coordinate.
		/// In a virtual device multi-screen environment in which the
		/// desktop area could span multiple physical screen devices,
		/// this coordinate is relative to the virtual coordinate system.
		/// Otherwise, this coordinate is relative to the coordinate system
		/// associated with the Component's GraphicsConfiguration.
		/// 
		/// @serial
		/// </summary>
		private int YAbs;

		/// <summary>
		/// Indicates the number of quick consecutive clicks of
		/// a mouse button.
		/// clickCount will be valid for only three mouse events :<BR>
		/// <code>MOUSE_CLICKED</code>,
		/// <code>MOUSE_PRESSED</code> and
		/// <code>MOUSE_RELEASED</code>.
		/// For the above, the <code>clickCount</code> will be at least 1.
		/// For all other events the count will be 0.
		/// 
		/// @serial </summary>
		/// <seealso cref= #getClickCount() </seealso>
		internal int ClickCount_Renamed;

		/// <summary>
		/// Indicates which, if any, of the mouse buttons has changed state.
		/// 
		/// The valid values are ranged from 0 to the value returned by the
		/// <seealso cref="java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()"/> method.
		/// This range already includes constants {@code NOBUTTON}, {@code BUTTON1},
		/// {@code BUTTON2}, and {@code BUTTON3}
		/// if these buttons are present. So it is allowed to use these constants too.
		/// For example, for a mouse with two buttons this field may contain the following values:
		/// <ul>
		/// <li> 0 ({@code NOBUTTON})
		/// <li> 1 ({@code BUTTON1})
		/// <li> 2 ({@code BUTTON2})
		/// </ul>
		/// If a mouse has 5 buttons, this field may contain the following values:
		/// <ul>
		/// <li> 0 ({@code NOBUTTON})
		/// <li> 1 ({@code BUTTON1})
		/// <li> 2 ({@code BUTTON2})
		/// <li> 3 ({@code BUTTON3})
		/// <li> 4
		/// <li> 5
		/// </ul>
		/// If support for extended mouse buttons is <seealso cref="Toolkit#areExtraMouseButtonsEnabled()"/> disabled by Java
		/// then the field may not contain the value larger than {@code BUTTON3}.
		/// @serial </summary>
		/// <seealso cref= #getButton() </seealso>
		/// <seealso cref= java.awt.Toolkit#areExtraMouseButtonsEnabled() </seealso>
		internal int Button_Renamed;

		/// <summary>
		/// A property used to indicate whether a Popup Menu
		/// should appear  with a certain gestures.
		/// If <code>popupTrigger</code> = <code>false</code>,
		/// no popup menu should appear.  If it is <code>true</code>
		/// then a popup menu should appear.
		/// 
		/// @serial </summary>
		/// <seealso cref= java.awt.PopupMenu </seealso>
		/// <seealso cref= #isPopupTrigger() </seealso>
		internal bool PopupTrigger_Renamed = false;

		/*
		 * JDK 1.1 serialVersionUID
		 */
		private new const long SerialVersionUID = -991214153494842848L;

		/// <summary>
		/// A number of buttons available on the mouse at the {@code Toolkit} machinery startup.
		/// </summary>
		private static int CachedNumberOfButtons;

		static MouseEvent()
		{
			/* ensure that the necessary native libraries are loaded */
			NativeLibLoader.LoadLibraries();
			if (!GraphicsEnvironment.Headless)
			{
				initIDs();
			}
//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':
//ORIGINAL LINE: final java.awt.Toolkit tk = java.awt.Toolkit.getDefaultToolkit();
			Toolkit tk = Toolkit.DefaultToolkit;
			if (tk is SunToolkit)
			{
				CachedNumberOfButtons = ((SunToolkit)tk).NumberOfButtons;
			}
			else
			{
				//It's expected that some toolkits (Headless,
				//whatever besides SunToolkit) could also operate.
				CachedNumberOfButtons = 3;
			}
		}

		/// <summary>
		/// Initialize JNI field and method IDs for fields that may be
		///  accessed from C.
		/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Replace 'unknown' with the appropriate dll name:
		[DllImport("unknown")]
		private static extern void initIDs();

		/// <summary>
		/// Returns the absolute x, y position of the event.
		/// In a virtual device multi-screen environment in which the
		/// desktop area could span multiple physical screen devices,
		/// these coordinates are relative to the virtual coordinate system.
		/// Otherwise, these coordinates are relative to the coordinate system
		/// associated with the Component's GraphicsConfiguration.
		/// </summary>
		/// <returns> a <code>Point</code> object containing the absolute  x
		///  and y coordinates.
		/// </returns>
		/// <seealso cref= java.awt.GraphicsConfiguration
		/// @since 1.6 </seealso>
		public virtual Point LocationOnScreen
		{
			get
			{
			  return new Point(XAbs, YAbs);
			}
		}

		/// <summary>
		/// Returns the absolute horizontal x position of the event.
		/// In a virtual device multi-screen environment in which the
		/// desktop area could span multiple physical screen devices,
		/// this coordinate is relative to the virtual coordinate system.
		/// Otherwise, this coordinate is relative to the coordinate system
		/// associated with the Component's GraphicsConfiguration.
		/// </summary>
		/// <returns> x  an integer indicating absolute horizontal position.
		/// </returns>
		/// <seealso cref= java.awt.GraphicsConfiguration
		/// @since 1.6 </seealso>
		public virtual int XOnScreen
		{
			get
			{
				return XAbs;
			}
		}

		/// <summary>
		/// Returns the absolute vertical y position of the event.
		/// In a virtual device multi-screen environment in which the
		/// desktop area could span multiple physical screen devices,
		/// this coordinate is relative to the virtual coordinate system.
		/// Otherwise, this coordinate is relative to the coordinate system
		/// associated with the Component's GraphicsConfiguration.
		/// </summary>
		/// <returns> y  an integer indicating absolute vertical position.
		/// </returns>
		/// <seealso cref= java.awt.GraphicsConfiguration
		/// @since 1.6 </seealso>
		public virtual int YOnScreen
		{
			get
			{
				return YAbs;
			}
		}

		/// <summary>
		/// Constructs a <code>MouseEvent</code> object with the
		/// specified source component,
		/// type, time, modifiers, coordinates, click count, popupTrigger flag,
		/// and button number.
		/// <para>
		/// Creating an invalid event (such
		/// as by using more than one of the old _MASKs, or modifier/button
		/// values which don't match) results in unspecified behavior.
		/// An invocation of the form
		/// <tt>MouseEvent(source, id, when, modifiers, x, y, clickCount, popupTrigger, button)</tt>
		/// behaves in exactly the same way as the invocation
		/// <tt> {@link #MouseEvent(Component, int, long, int, int, int,
		/// int, int, int, boolean, int) MouseEvent}(source, id, when, modifiers,
		/// x, y, xAbs, yAbs, clickCount, popupTrigger, button)</tt>
		/// where xAbs and yAbs defines as source's location on screen plus
		/// relative coordinates x and y.
		/// xAbs and yAbs are set to zero if the source is not showing.
		/// This method throws an
		/// <code>IllegalArgumentException</code> if <code>source</code>
		/// is <code>null</code>.
		/// 
		/// </para>
		/// </summary>
		/// <param name="source">       The <code>Component</code> that originated the event </param>
		/// <param name="id">              An integer indicating the type of event.
		///                     For information on allowable values, see
		///                     the class description for <seealso cref="MouseEvent"/> </param>
		/// <param name="when">         A long integer that gives the time the event occurred.
		///                     Passing negative or zero value
		///                     is not recommended </param>
		/// <param name="modifiers">    a modifier mask describing the modifier keys and mouse
		///                     buttons (for example, shift, ctrl, alt, and meta) that
		///                     are down during the event.
		///                     Only extended modifiers are allowed to be used as a
		///                     value for this parameter (see the <seealso cref="InputEvent#getModifiersEx"/>
		///                     class for the description of extended modifiers).
		///                     Passing negative parameter
		///                     is not recommended.
		///                     Zero value means that no modifiers were passed </param>
		/// <param name="x">            The horizontal x coordinate for the mouse location.
		///                       It is allowed to pass negative values </param>
		/// <param name="y">            The vertical y coordinate for the mouse location.
		///                       It is allowed to pass negative values </param>
		/// <param name="clickCount">   The number of mouse clicks associated with event.
		///                       Passing negative value
		///                       is not recommended </param>
		/// <param name="popupTrigger"> A boolean that equals {@code true} if this event
		///                     is a trigger for a popup menu </param>
		/// <param name="button">       An integer that indicates, which of the mouse buttons has
		///                     changed its state.
		/// The following rules are applied to this parameter:
		/// <ul>
		/// <li>If support for the extended mouse buttons is
		/// <seealso cref="Toolkit#areExtraMouseButtonsEnabled() disabled"/> by Java
		/// then it is allowed to create {@code MouseEvent} objects only with the standard buttons:
		/// {@code NOBUTTON}, {@code BUTTON1}, {@code BUTTON2}, and
		/// {@code BUTTON3}.
		/// <li> If support for the extended mouse buttons is
		/// <seealso cref="Toolkit#areExtraMouseButtonsEnabled() enabled"/> by Java
		/// then it is allowed to create {@code MouseEvent} objects with
		/// the standard buttons.
		/// In case the support for extended mouse buttons is
		/// <seealso cref="Toolkit#areExtraMouseButtonsEnabled() enabled"/> by Java, then
		/// in addition to the standard buttons, {@code MouseEvent} objects can be created
		/// using buttons from the range starting from 4 to
		/// <seealso cref="java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()"/>
		/// if the mouse has more than three buttons.
		/// </ul> </param>
		/// <exception cref="IllegalArgumentException"> if {@code button} is less then zero </exception>
		/// <exception cref="IllegalArgumentException"> if <code>source</code> is null </exception>
		/// <exception cref="IllegalArgumentException"> if {@code button} is greater then BUTTON3 and the support for extended mouse buttons is
		///                                  <seealso cref="Toolkit#areExtraMouseButtonsEnabled() disabled"/> by Java </exception>
		/// <exception cref="IllegalArgumentException"> if {@code button} is greater then the
		///                                  <seealso cref="java.awt.MouseInfo#getNumberOfButtons() current number of buttons"/> and the support
		///                                  for extended mouse buttons is <seealso cref="Toolkit#areExtraMouseButtonsEnabled() enabled"/>
		///                                  by Java </exception>
		/// <exception cref="IllegalArgumentException"> if an invalid <code>button</code>
		///            value is passed in </exception>
		/// <exception cref="IllegalArgumentException"> if <code>source</code> is null </exception>
		/// <seealso cref= #getSource() </seealso>
		/// <seealso cref= #getID() </seealso>
		/// <seealso cref= #getWhen() </seealso>
		/// <seealso cref= #getModifiers() </seealso>
		/// <seealso cref= #getX() </seealso>
		/// <seealso cref= #getY() </seealso>
		/// <seealso cref= #getClickCount() </seealso>
		/// <seealso cref= #isPopupTrigger() </seealso>
		/// <seealso cref= #getButton()
		/// @since 1.4 </seealso>
		public MouseEvent(Component source, int id, long when, int modifiers, int x, int y, int clickCount, bool popupTrigger, int button) : this(source, id, when, modifiers, x, y, 0, 0, clickCount, popupTrigger, button)
		{
			Point eventLocationOnScreen = new Point(0, 0);
			try
			{
			  eventLocationOnScreen = source.LocationOnScreen;
			  this.XAbs = eventLocationOnScreen.x + x;
			  this.YAbs = eventLocationOnScreen.y + y;
			}
			catch (IllegalComponentStateException)
			{
			  this.XAbs = 0;
			  this.YAbs = 0;
			}
		}

		/// <summary>
		/// Constructs a <code>MouseEvent</code> object with the
		/// specified source component,
		/// type, modifiers, coordinates, click count, and popupTrigger flag.
		/// An invocation of the form
		/// <tt>MouseEvent(source, id, when, modifiers, x, y, clickCount, popupTrigger)</tt>
		/// behaves in exactly the same way as the invocation
		/// <tt> {@link #MouseEvent(Component, int, long, int, int, int,
		/// int, int, int, boolean, int) MouseEvent}(source, id, when, modifiers,
		/// x, y, xAbs, yAbs, clickCount, popupTrigger, MouseEvent.NOBUTTON)</tt>
		/// where xAbs and yAbs defines as source's location on screen plus
		/// relative coordinates x and y.
		/// xAbs and yAbs are set to zero if the source is not showing.
		/// This method throws an <code>IllegalArgumentException</code>
		/// if <code>source</code> is <code>null</code>.
		/// </summary>
		/// <param name="source">       The <code>Component</code> that originated the event </param>
		/// <param name="id">              An integer indicating the type of event.
		///                     For information on allowable values, see
		///                     the class description for <seealso cref="MouseEvent"/> </param>
		/// <param name="when">         A long integer that gives the time the event occurred.
		///                     Passing negative or zero value
		///                     is not recommended </param>
		/// <param name="modifiers">    a modifier mask describing the modifier keys and mouse
		///                     buttons (for example, shift, ctrl, alt, and meta) that
		///                     are down during the event.
		///                     Only extended modifiers are allowed to be used as a
		///                     value for this parameter (see the <seealso cref="InputEvent#getModifiersEx"/>
		///                     class for the description of extended modifiers).
		///                     Passing negative parameter
		///                     is not recommended.
		///                     Zero value means that no modifiers were passed </param>
		/// <param name="x">            The horizontal x coordinate for the mouse location.
		///                       It is allowed to pass negative values </param>
		/// <param name="y">            The vertical y coordinate for the mouse location.
		///                       It is allowed to pass negative values </param>
		/// <param name="clickCount">   The number of mouse clicks associated with event.
		///                       Passing negative value
		///                       is not recommended </param>
		/// <param name="popupTrigger"> A boolean that equals {@code true} if this event
		///                     is a trigger for a popup menu </param>
		/// <exception cref="IllegalArgumentException"> if <code>source</code> is null </exception>
		/// <seealso cref= #getSource() </seealso>
		/// <seealso cref= #getID() </seealso>
		/// <seealso cref= #getWhen() </seealso>
		/// <seealso cref= #getModifiers() </seealso>
		/// <seealso cref= #getX() </seealso>
		/// <seealso cref= #getY() </seealso>
		/// <seealso cref= #getClickCount() </seealso>
		/// <seealso cref= #isPopupTrigger() </seealso>
		 public MouseEvent(Component source, int id, long when, int modifiers, int x, int y, int clickCount, bool popupTrigger) : this(source, id, when, modifiers, x, y, clickCount, popupTrigger, NOBUTTON)
		 {
		 }


		/* if the button is an extra button and it is released or clicked then in Xsystem its state
		   is not modified. Exclude this button number from ExtModifiers mask.*/
		[NonSerialized]
		private bool ShouldExcludeButtonFromExtModifiers = false;

		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		public override int ModifiersEx
		{
			get
			{
				int tmpModifiers = Modifiers_Renamed;
				if (ShouldExcludeButtonFromExtModifiers)
				{
					tmpModifiers &= ~(InputEvent.GetMaskForButton(Button));
				}
				return tmpModifiers & ~JDK_1_3_MODIFIERS;
			}
		}

		/// <summary>
		/// Constructs a <code>MouseEvent</code> object with the
		/// specified source component,
		/// type, time, modifiers, coordinates, absolute coordinates, click count, popupTrigger flag,
		/// and button number.
		/// <para>
		/// Creating an invalid event (such
		/// as by using more than one of the old _MASKs, or modifier/button
		/// values which don't match) results in unspecified behavior.
		/// Even if inconsistent values for relative and absolute coordinates are
		/// passed to the constructor, the mouse event instance is still
		/// created and no exception is thrown.
		/// This method throws an
		/// <code>IllegalArgumentException</code> if <code>source</code>
		/// is <code>null</code>.
		/// 
		/// </para>
		/// </summary>
		/// <param name="source">       The <code>Component</code> that originated the event </param>
		/// <param name="id">              An integer indicating the type of event.
		///                     For information on allowable values, see
		///                     the class description for <seealso cref="MouseEvent"/> </param>
		/// <param name="when">         A long integer that gives the time the event occurred.
		///                     Passing negative or zero value
		///                     is not recommended </param>
		/// <param name="modifiers">    a modifier mask describing the modifier keys and mouse
		///                     buttons (for example, shift, ctrl, alt, and meta) that
		///                     are down during the event.
		///                     Only extended modifiers are allowed to be used as a
		///                     value for this parameter (see the <seealso cref="InputEvent#getModifiersEx"/>
		///                     class for the description of extended modifiers).
		///                     Passing negative parameter
		///                     is not recommended.
		///                     Zero value means that no modifiers were passed </param>
		/// <param name="x">            The horizontal x coordinate for the mouse location.
		///                       It is allowed to pass negative values </param>
		/// <param name="y">            The vertical y coordinate for the mouse location.
		///                       It is allowed to pass negative values </param>
		/// <param name="xAbs">           The absolute horizontal x coordinate for the mouse location
		///                       It is allowed to pass negative values </param>
		/// <param name="yAbs">           The absolute vertical y coordinate for the mouse location
		///                       It is allowed to pass negative values </param>
		/// <param name="clickCount">   The number of mouse clicks associated with event.
		///                       Passing negative value
		///                       is not recommended </param>
		/// <param name="popupTrigger"> A boolean that equals {@code true} if this event
		///                     is a trigger for a popup menu </param>
		/// <param name="button">       An integer that indicates, which of the mouse buttons has
		///                     changed its state.
		/// The following rules are applied to this parameter:
		/// <ul>
		/// <li>If support for the extended mouse buttons is
		/// <seealso cref="Toolkit#areExtraMouseButtonsEnabled() disabled"/> by Java
		/// then it is allowed to create {@code MouseEvent} objects only with the standard buttons:
		/// {@code NOBUTTON}, {@code BUTTON1}, {@code BUTTON2}, and
		/// {@code BUTTON3}.
		/// <li> If support for the extended mouse buttons is
		/// <seealso cref="Toolkit#areExtraMouseButtonsEnabled() enabled"/> by Java
		/// then it is allowed to create {@code MouseEvent} objects with
		/// the standard buttons.
		/// In case the support for extended mouse buttons is
		/// <seealso cref="Toolkit#areExtraMouseButtonsEnabled() enabled"/> by Java, then
		/// in addition to the standard buttons, {@code MouseEvent} objects can be created
		/// using buttons from the range starting from 4 to
		/// <seealso cref="java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()"/>
		/// if the mouse has more than three buttons.
		/// </ul> </param>
		/// <exception cref="IllegalArgumentException"> if {@code button} is less then zero </exception>
		/// <exception cref="IllegalArgumentException"> if <code>source</code> is null </exception>
		/// <exception cref="IllegalArgumentException"> if {@code button} is greater then BUTTON3 and the support for extended mouse buttons is
		///                                  <seealso cref="Toolkit#areExtraMouseButtonsEnabled() disabled"/> by Java </exception>
		/// <exception cref="IllegalArgumentException"> if {@code button} is greater then the
		///                                  <seealso cref="java.awt.MouseInfo#getNumberOfButtons() current number of buttons"/> and the support
		///                                  for extended mouse buttons is <seealso cref="Toolkit#areExtraMouseButtonsEnabled() enabled"/>
		///                                  by Java </exception>
		/// <exception cref="IllegalArgumentException"> if an invalid <code>button</code>
		///            value is passed in </exception>
		/// <exception cref="IllegalArgumentException"> if <code>source</code> is null </exception>
		/// <seealso cref= #getSource() </seealso>
		/// <seealso cref= #getID() </seealso>
		/// <seealso cref= #getWhen() </seealso>
		/// <seealso cref= #getModifiers() </seealso>
		/// <seealso cref= #getX() </seealso>
		/// <seealso cref= #getY() </seealso>
		/// <seealso cref= #getXOnScreen() </seealso>
		/// <seealso cref= #getYOnScreen() </seealso>
		/// <seealso cref= #getClickCount() </seealso>
		/// <seealso cref= #isPopupTrigger() </seealso>
		/// <seealso cref= #getButton() </seealso>
		/// <seealso cref= #button </seealso>
		/// <seealso cref= Toolkit#areExtraMouseButtonsEnabled() </seealso>
		/// <seealso cref= java.awt.MouseInfo#getNumberOfButtons() </seealso>
		/// <seealso cref= InputEvent#getMaskForButton(int)
		/// @since 1.6 </seealso>
		public MouseEvent(Component source, int id, long when, int modifiers, int x, int y, int xAbs, int yAbs, int clickCount, bool popupTrigger, int button) : base(source, id, when, modifiers)
		{
			this.x = x;
			this.y = y;
			this.XAbs = xAbs;
			this.YAbs = yAbs;
			this.ClickCount_Renamed = clickCount;
			this.PopupTrigger_Renamed = popupTrigger;
			if (button < NOBUTTON)
			{
				throw new IllegalArgumentException("Invalid button value :" + button);
			}
			if (button > BUTTON3)
			{
				if (!Toolkit.DefaultToolkit.AreExtraMouseButtonsEnabled())
				{
					throw new IllegalArgumentException("Extra mouse events are disabled " + button);
				}
				else
				{
					if (button > CachedNumberOfButtons)
					{
						throw new IllegalArgumentException("Nonexistent button " + button);
					}
				}
				// XToolkit: extra buttons are not reporting about their state correctly.
				// Being pressed they report the state=0 both on the press and on the release.
				// For 1-3 buttons the state value equals zero on press and non-zero on release.
				// Other modifiers like Shift, ALT etc seem report well with extra buttons.
				// The problem reveals as follows: one button is pressed and then another button is pressed and released.
				// So, the getModifiersEx() would not be zero due to a first button and we will skip this modifier.
				// This may have to be moved into the peer code instead if possible.

				if (ModifiersEx != 0) //There is at least one more button in a pressed state.
				{
					if (id == MouseEvent.MOUSE_RELEASED || id == MouseEvent.MOUSE_CLICKED)
					{
						ShouldExcludeButtonFromExtModifiers = true;
					}
				}
			}

			this.Button_Renamed = button;

			if ((Modifiers != 0) && (ModifiersEx == 0))
			{
				SetNewModifiers();
			}
			else if ((Modifiers == 0) && (ModifiersEx != 0 || button != NOBUTTON) && (button <= BUTTON3))
			{
				SetOldModifiers();
			}
		}

		/// <summary>
		/// Returns the horizontal x position of the event relative to the
		/// source component.
		/// </summary>
		/// <returns> x  an integer indicating horizontal position relative to
		///            the component </returns>
		public virtual int X
		{
			get
			{
				return x;
			}
		}

		/// <summary>
		/// Returns the vertical y position of the event relative to the
		/// source component.
		/// </summary>
		/// <returns> y  an integer indicating vertical position relative to
		///            the component </returns>
		public virtual int Y
		{
			get
			{
				return y;
			}
		}

		/// <summary>
		/// Returns the x,y position of the event relative to the source component.
		/// </summary>
		/// <returns> a <code>Point</code> object containing the x and y coordinates
		///         relative to the source component
		///  </returns>
		public virtual Point Point
		{
			get
			{
				int x;
				int y;
				lock (this)
				{
					x = this.x;
					y = this.y;
				}
				return new Point(x, y);
			}
		}

		/// <summary>
		/// Translates the event's coordinates to a new position
		/// by adding specified <code>x</code> (horizontal) and <code>y</code>
		/// (vertical) offsets.
		/// </summary>
		/// <param name="x"> the horizontal x value to add to the current x
		///          coordinate position </param>
		/// <param name="y"> the vertical y value to add to the current y
		///            coordinate position </param>
		public virtual void TranslatePoint(int x, int y)
		{
			lock (this)
			{
				this.x += x;
				this.y += y;
			}
		}

		/// <summary>
		/// Returns the number of mouse clicks associated with this event.
		/// </summary>
		/// <returns> integer value for the number of clicks </returns>
		public virtual int ClickCount
		{
			get
			{
				return ClickCount_Renamed;
			}
		}

		/// <summary>
		/// Returns which, if any, of the mouse buttons has changed state.
		/// The returned value is ranged
		/// from 0 to the <seealso cref="java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()"/>
		/// value.
		/// The returned value includes at least the following constants:
		/// <ul>
		/// <li> {@code NOBUTTON}
		/// <li> {@code BUTTON1}
		/// <li> {@code BUTTON2}
		/// <li> {@code BUTTON3}
		/// </ul>
		/// It is allowed to use those constants to compare with the returned button number in the application.
		/// For example,
		/// <pre>
		/// if (anEvent.getButton() == MouseEvent.BUTTON1) {
		/// </pre>
		/// In particular, for a mouse with one, two, or three buttons this method may return the following values:
		/// <ul>
		/// <li> 0 ({@code NOBUTTON})
		/// <li> 1 ({@code BUTTON1})
		/// <li> 2 ({@code BUTTON2})
		/// <li> 3 ({@code BUTTON3})
		/// </ul>
		/// Button numbers greater then {@code BUTTON3} have no constant identifier. So if a mouse with five buttons is
		/// installed, this method may return the following values:
		/// <ul>
		/// <li> 0 ({@code NOBUTTON})
		/// <li> 1 ({@code BUTTON1})
		/// <li> 2 ({@code BUTTON2})
		/// <li> 3 ({@code BUTTON3})
		/// <li> 4
		/// <li> 5
		/// </ul>
		/// <para>
		/// Note: If support for extended mouse buttons is <seealso cref="Toolkit#areExtraMouseButtonsEnabled() disabled"/> by Java
		/// then the AWT event subsystem does not produce mouse events for the extended mouse
		/// buttons. So it is not expected that this method returns anything except {@code NOBUTTON}, {@code BUTTON1},
		/// {@code BUTTON2}, {@code BUTTON3}.
		/// 
		/// </para>
		/// </summary>
		/// <returns> one of the values from 0 to <seealso cref="java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()"/>
		///         if support for the extended mouse buttons is <seealso cref="Toolkit#areExtraMouseButtonsEnabled() enabled"/> by Java.
		///         That range includes {@code NOBUTTON}, {@code BUTTON1}, {@code BUTTON2}, {@code BUTTON3};
		///         <br>
		///         {@code NOBUTTON}, {@code BUTTON1}, {@code BUTTON2} or {@code BUTTON3}
		///         if support for the extended mouse buttons is <seealso cref="Toolkit#areExtraMouseButtonsEnabled() disabled"/> by Java
		/// @since 1.4 </returns>
		/// <seealso cref= Toolkit#areExtraMouseButtonsEnabled() </seealso>
		/// <seealso cref= java.awt.MouseInfo#getNumberOfButtons() </seealso>
		/// <seealso cref= #MouseEvent(Component, int, long, int, int, int, int, int, int, boolean, int) </seealso>
		/// <seealso cref= InputEvent#getMaskForButton(int) </seealso>
		public virtual int Button
		{
			get
			{
				return Button_Renamed;
			}
		}

		/// <summary>
		/// Returns whether or not this mouse event is the popup menu
		/// trigger event for the platform.
		/// <para><b>Note</b>: Popup menus are triggered differently
		/// on different systems. Therefore, <code>isPopupTrigger</code>
		/// should be checked in both <code>mousePressed</code>
		/// and <code>mouseReleased</code>
		/// for proper cross-platform functionality.
		/// 
		/// </para>
		/// </summary>
		/// <returns> boolean, true if this event is the popup menu trigger
		///         for this platform </returns>
		public virtual bool PopupTrigger
		{
			get
			{
				return PopupTrigger_Renamed;
			}
		}

		/// <summary>
		/// Returns a <code>String</code> instance describing the modifier keys and
		/// mouse buttons that were down during the event, such as "Shift",
		/// or "Ctrl+Shift". These strings can be localized by changing
		/// the <code>awt.properties</code> file.
		/// <para>
		/// Note that the <code>InputEvent.ALT_MASK</code> and
		/// <code>InputEvent.BUTTON2_MASK</code> have equal values,
		/// so the "Alt" string is returned for both modifiers.  Likewise,
		/// the <code>InputEvent.META_MASK</code> and
		/// <code>InputEvent.BUTTON3_MASK</code> have equal values,
		/// so the "Meta" string is returned for both modifiers.
		/// </para>
		/// <para>
		/// Note that passing negative parameter is incorrect,
		/// and will cause the returning an unspecified string.
		/// Zero parameter means that no modifiers were passed and will
		/// cause the returning an empty string.
		/// </para>
		/// <para>
		/// </para>
		/// </summary>
		/// <param name="modifiers"> A modifier mask describing the modifier keys and
		///                  mouse buttons that were down during the event </param>
		/// <returns> string   string text description of the combination of modifier
		///                  keys and mouse buttons that were down during the event </returns>
		/// <seealso cref= InputEvent#getModifiersExText(int)
		/// @since 1.4 </seealso>
		public static String GetMouseModifiersText(int modifiers)
		{
			StringBuilder buf = new StringBuilder();
			if ((modifiers & InputEvent.ALT_MASK) != 0)
			{
				buf.Append(Toolkit.GetProperty("AWT.alt", "Alt"));
				buf.Append("+");
			}
			if ((modifiers & InputEvent.META_MASK) != 0)
			{
				buf.Append(Toolkit.GetProperty("AWT.meta", "Meta"));
				buf.Append("+");
			}
			if ((modifiers & InputEvent.CTRL_MASK) != 0)
			{
				buf.Append(Toolkit.GetProperty("AWT.control", "Ctrl"));
				buf.Append("+");
			}
			if ((modifiers & InputEvent.SHIFT_MASK) != 0)
			{
				buf.Append(Toolkit.GetProperty("AWT.shift", "Shift"));
				buf.Append("+");
			}
			if ((modifiers & InputEvent.ALT_GRAPH_MASK) != 0)
			{
				buf.Append(Toolkit.GetProperty("AWT.altGraph", "Alt Graph"));
				buf.Append("+");
			}
			if ((modifiers & InputEvent.BUTTON1_MASK) != 0)
			{
				buf.Append(Toolkit.GetProperty("AWT.button1", "Button1"));
				buf.Append("+");
			}
			if ((modifiers & InputEvent.BUTTON2_MASK) != 0)
			{
				buf.Append(Toolkit.GetProperty("AWT.button2", "Button2"));
				buf.Append("+");
			}
			if ((modifiers & InputEvent.BUTTON3_MASK) != 0)
			{
				buf.Append(Toolkit.GetProperty("AWT.button3", "Button3"));
				buf.Append("+");
			}

			int mask;

			// TODO: add a toolkit field that holds a number of button on the mouse.
			// As the method getMouseModifiersText() is static and obtain
			// an integer as a parameter then we may not restrict this with the number
			// of buttons installed on the mouse.
			// It's a temporary solution. We need to somehow hold the number of buttons somewhere else.
			for (int i = 1; i <= CachedNumberOfButtons; i++)
			{
				mask = InputEvent.GetMaskForButton(i);
				if ((modifiers & mask) != 0 && buf.IndexOf(Toolkit.GetProperty("AWT.button" + i, "Button" + i)) == -1) //1,2,3 buttons may already be there; so don't duplicate it.
				{
					buf.Append(Toolkit.GetProperty("AWT.button" + i, "Button" + i));
					buf.Append("+");
				}
			}

			if (buf.Length() > 0)
			{
				buf.Length = buf.Length() - 1; // remove trailing '+'
			}
			return buf.ToString();
		}

		/// <summary>
		/// Returns a parameter string identifying this event.
		/// This method is useful for event-logging and for debugging.
		/// </summary>
		/// <returns> a string identifying the event and its attributes </returns>
		public override String ParamString()
		{
			StringBuilder str = new StringBuilder(80);

			switch (Id)
			{
			  case MOUSE_PRESSED:
				  str.Append("MOUSE_PRESSED");
				  break;
			  case MOUSE_RELEASED:
				  str.Append("MOUSE_RELEASED");
				  break;
			  case MOUSE_CLICKED:
				  str.Append("MOUSE_CLICKED");
				  break;
			  case MOUSE_ENTERED:
				  str.Append("MOUSE_ENTERED");
				  break;
			  case MOUSE_EXITED:
				  str.Append("MOUSE_EXITED");
				  break;
			  case MOUSE_MOVED:
				  str.Append("MOUSE_MOVED");
				  break;
			  case MOUSE_DRAGGED:
				  str.Append("MOUSE_DRAGGED");
				  break;
			  case MOUSE_WHEEL:
				  str.Append("MOUSE_WHEEL");
				  break;
			   default:
				  str.Append("unknown type");
			  break;
			}

			// (x,y) coordinates
			str.Append(",(").Append(x).Append(",").Append(y).Append(")");
			str.Append(",absolute(").Append(XAbs).Append(",").Append(YAbs).Append(")");

			if (Id != MOUSE_DRAGGED && Id != MOUSE_MOVED)
			{
				str.Append(",button=").Append(Button);
			}

			if (Modifiers != 0)
			{
				str.Append(",modifiers=").Append(GetMouseModifiersText(Modifiers_Renamed));
			}

			if (ModifiersEx != 0)
			{
				//Using plain "modifiers" here does show an excluded extended buttons in the string event representation.
				//getModifiersEx() solves the problem.
				str.Append(",extModifiers=").Append(GetModifiersExText(ModifiersEx));
			}

			str.Append(",clickCount=").Append(ClickCount_Renamed);

			return str.ToString();
		}

		/// <summary>
		/// Sets new modifiers by the old ones.
		/// Also sets button.
		/// </summary>
		private void SetNewModifiers()
		{
			if ((Modifiers_Renamed & BUTTON1_MASK) != 0)
			{
				Modifiers_Renamed |= BUTTON1_DOWN_MASK;
			}
			if ((Modifiers_Renamed & BUTTON2_MASK) != 0)
			{
				Modifiers_Renamed |= BUTTON2_DOWN_MASK;
			}
			if ((Modifiers_Renamed & BUTTON3_MASK) != 0)
			{
				Modifiers_Renamed |= BUTTON3_DOWN_MASK;
			}
			if (Id == MOUSE_PRESSED || Id == MOUSE_RELEASED || Id == MOUSE_CLICKED)
			{
				if ((Modifiers_Renamed & BUTTON1_MASK) != 0)
				{
					Button_Renamed = BUTTON1;
					Modifiers_Renamed &= ~BUTTON2_MASK & ~BUTTON3_MASK;
					if (Id != MOUSE_PRESSED)
					{
						Modifiers_Renamed &= ~BUTTON1_DOWN_MASK;
					}
				}
				else if ((Modifiers_Renamed & BUTTON2_MASK) != 0)
				{
					Button_Renamed = BUTTON2;
					Modifiers_Renamed &= ~BUTTON1_MASK & ~BUTTON3_MASK;
					if (Id != MOUSE_PRESSED)
					{
						Modifiers_Renamed &= ~BUTTON2_DOWN_MASK;
					}
				}
				else if ((Modifiers_Renamed & BUTTON3_MASK) != 0)
				{
					Button_Renamed = BUTTON3;
					Modifiers_Renamed &= ~BUTTON1_MASK & ~BUTTON2_MASK;
					if (Id != MOUSE_PRESSED)
					{
						Modifiers_Renamed &= ~BUTTON3_DOWN_MASK;
					}
				}
			}
			if ((Modifiers_Renamed & InputEvent.ALT_MASK) != 0)
			{
				Modifiers_Renamed |= InputEvent.ALT_DOWN_MASK;
			}
			if ((Modifiers_Renamed & InputEvent.META_MASK) != 0)
			{
				Modifiers_Renamed |= InputEvent.META_DOWN_MASK;
			}
			if ((Modifiers_Renamed & InputEvent.SHIFT_MASK) != 0)
			{
				Modifiers_Renamed |= InputEvent.SHIFT_DOWN_MASK;
			}
			if ((Modifiers_Renamed & InputEvent.CTRL_MASK) != 0)
			{
				Modifiers_Renamed |= InputEvent.CTRL_DOWN_MASK;
			}
			if ((Modifiers_Renamed & InputEvent.ALT_GRAPH_MASK) != 0)
			{
				Modifiers_Renamed |= InputEvent.ALT_GRAPH_DOWN_MASK;
			}
		}

		/// <summary>
		/// Sets old modifiers by the new ones.
		/// </summary>
		private void SetOldModifiers()
		{
			if (Id == MOUSE_PRESSED || Id == MOUSE_RELEASED || Id == MOUSE_CLICKED)
			{
				switch (Button_Renamed)
				{
				case BUTTON1:
					Modifiers_Renamed |= BUTTON1_MASK;
					break;
				case BUTTON2:
					Modifiers_Renamed |= BUTTON2_MASK;
					break;
				case BUTTON3:
					Modifiers_Renamed |= BUTTON3_MASK;
					break;
				}
			}
			else
			{
				if ((Modifiers_Renamed & BUTTON1_DOWN_MASK) != 0)
				{
					Modifiers_Renamed |= BUTTON1_MASK;
				}
				if ((Modifiers_Renamed & BUTTON2_DOWN_MASK) != 0)
				{
					Modifiers_Renamed |= BUTTON2_MASK;
				}
				if ((Modifiers_Renamed & BUTTON3_DOWN_MASK) != 0)
				{
					Modifiers_Renamed |= BUTTON3_MASK;
				}
			}
			if ((Modifiers_Renamed & ALT_DOWN_MASK) != 0)
			{
				Modifiers_Renamed |= ALT_MASK;
			}
			if ((Modifiers_Renamed & META_DOWN_MASK) != 0)
			{
				Modifiers_Renamed |= META_MASK;
			}
			if ((Modifiers_Renamed & SHIFT_DOWN_MASK) != 0)
			{
				Modifiers_Renamed |= SHIFT_MASK;
			}
			if ((Modifiers_Renamed & CTRL_DOWN_MASK) != 0)
			{
				Modifiers_Renamed |= CTRL_MASK;
			}
			if ((Modifiers_Renamed & ALT_GRAPH_DOWN_MASK) != 0)
			{
				Modifiers_Renamed |= ALT_GRAPH_MASK;
			}
		}

		/// <summary>
		/// Sets new modifiers by the old ones.
		/// @serial
		/// </summary>
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in .NET:
//ORIGINAL LINE: private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException
		private void ReadObject(ObjectInputStream s)
		{
			s.DefaultReadObject();
			if (Modifiers != 0 && ModifiersEx == 0)
			{
				SetNewModifiers();
			}
		}
	}

}