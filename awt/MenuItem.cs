using System;
using System.Runtime.InteropServices;

/*
 * Copyright (c) 1995, 2013, Oracle and/or its affiliates. All rights reserved.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */
namespace java.awt
{

	using AWTAccessor = sun.awt.AWTAccessor;

	/// <summary>
	/// All items in a menu must belong to the class
	/// <code>MenuItem</code>, or one of its subclasses.
	/// <para>
	/// The default <code>MenuItem</code> object embodies
	/// a simple labeled menu item.
	/// </para>
	/// <para>
	/// This picture of a menu bar shows five menu items:
	/// <IMG SRC="doc-files/MenuBar-1.gif" alt="The following text describes this graphic."
	/// style="float:center; margin: 7px 10px;">
	/// <br style="clear:left;">
	/// The first two items are simple menu items, labeled
	/// <code>"Basic"</code> and <code>"Simple"</code>.
	/// Following these two items is a separator, which is itself
	/// a menu item, created with the label <code>"-"</code>.
	/// Next is an instance of <code>CheckboxMenuItem</code>
	/// labeled <code>"Check"</code>. The final menu item is a
	/// submenu labeled <code>"More&nbsp;Examples"</code>,
	/// and this submenu is an instance of <code>Menu</code>.
	/// </para>
	/// <para>
	/// When a menu item is selected, AWT sends an action event to
	/// the menu item. Since the event is an
	/// instance of <code>ActionEvent</code>, the <code>processEvent</code>
	/// method examines the event and passes it along to
	/// <code>processActionEvent</code>. The latter method redirects the
	/// event to any <code>ActionListener</code> objects that have
	/// registered an interest in action events generated by this
	/// menu item.
	/// <P>
	/// Note that the subclass <code>Menu</code> overrides this behavior and
	/// does not send any event to the frame until one of its subitems is
	/// selected.
	/// 
	/// @author Sami Shaio
	/// </para>
	/// </summary>
	public class MenuItem : MenuComponent, Accessible
	{

		static MenuItem()
		{
			/* ensure that the necessary native libraries are loaded */
			Toolkit.LoadLibraries();
			if (!GraphicsEnvironment.Headless)
			{
				initIDs();
			}

			AWTAccessor.MenuItemAccessor = new MenuItemAccessorAnonymousInnerClassHelper();
		}

		private class MenuItemAccessorAnonymousInnerClassHelper : AWTAccessor.MenuItemAccessor
		{
			public MenuItemAccessorAnonymousInnerClassHelper()
			{
			}

			public virtual bool IsEnabled(MenuItem item)
			{
				return item.Enabled_Renamed;
			}

			public virtual String GetLabel(MenuItem item)
			{
				return item.Label_Renamed;
			}

			public virtual MenuShortcut GetShortcut(MenuItem item)
			{
				return item.Shortcut_Renamed;
			}

			public virtual String GetActionCommandImpl(MenuItem item)
			{
				return item.ActionCommandImpl;
			}

			public virtual bool IsItemEnabled(MenuItem item)
			{
				return item.ItemEnabled;
			}
		}

		/// <summary>
		/// A value to indicate whether a menu item is enabled
		/// or not.  If it is enabled, <code>enabled</code> will
		/// be set to true.  Else <code>enabled</code> will
		/// be set to false.
		/// 
		/// @serial </summary>
		/// <seealso cref= #isEnabled() </seealso>
		/// <seealso cref= #setEnabled(boolean) </seealso>
		internal bool Enabled_Renamed = true;

		/// <summary>
		/// <code>label</code> is the label of a menu item.
		/// It can be any string.
		/// 
		/// @serial </summary>
		/// <seealso cref= #getLabel() </seealso>
		/// <seealso cref= #setLabel(String) </seealso>
		internal String Label_Renamed;

		/// <summary>
		/// This field indicates the command tha has been issued
		/// by a  particular menu item.
		/// By default the <code>actionCommand</code>
		/// is the label of the menu item, unless it has been
		/// set using setActionCommand.
		/// 
		/// @serial </summary>
		/// <seealso cref= #setActionCommand(String) </seealso>
		/// <seealso cref= #getActionCommand() </seealso>
		internal String ActionCommand_Renamed;

		/// <summary>
		/// The eventMask is ONLY set by subclasses via enableEvents.
		/// The mask should NOT be set when listeners are registered
		/// so that we can distinguish the difference between when
		/// listeners request events and subclasses request them.
		/// 
		/// @serial
		/// </summary>
		internal long EventMask;

		[NonSerialized]
		internal ActionListener ActionListener;

		/// <summary>
		/// A sequence of key stokes that ia associated with
		/// a menu item.
		/// Note :in 1.1.2 you must use setActionCommand()
		/// on a menu item in order for its shortcut to
		/// work.
		/// 
		/// @serial </summary>
		/// <seealso cref= #getShortcut() </seealso>
		/// <seealso cref= #setShortcut(MenuShortcut) </seealso>
		/// <seealso cref= #deleteShortcut() </seealso>
		private MenuShortcut Shortcut_Renamed = null;

		private const String @base = "menuitem";
		private static int NameCounter = 0;

		/*
		 * JDK 1.1 serialVersionUID
		 */
		private const long SerialVersionUID = -21757335363267194L;

		/// <summary>
		/// Constructs a new MenuItem with an empty label and no keyboard
		/// shortcut. </summary>
		/// <exception cref="HeadlessException"> if GraphicsEnvironment.isHeadless()
		/// returns true. </exception>
		/// <seealso cref= java.awt.GraphicsEnvironment#isHeadless
		/// @since    JDK1.1 </seealso>
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in .NET:
//ORIGINAL LINE: public MenuItem() throws HeadlessException
		public MenuItem() : this("", null)
		{
		}

		/// <summary>
		/// Constructs a new MenuItem with the specified label
		/// and no keyboard shortcut. Note that use of "-" in
		/// a label is reserved to indicate a separator between
		/// menu items. By default, all menu items except for
		/// separators are enabled. </summary>
		/// <param name="label"> the label for this menu item. </param>
		/// <exception cref="HeadlessException"> if GraphicsEnvironment.isHeadless()
		/// returns true. </exception>
		/// <seealso cref= java.awt.GraphicsEnvironment#isHeadless
		/// @since       JDK1.0 </seealso>
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in .NET:
//ORIGINAL LINE: public MenuItem(String label) throws HeadlessException
		public MenuItem(String label) : this(label, null)
		{
		}

		/// <summary>
		/// Create a menu item with an associated keyboard shortcut.
		/// Note that use of "-" in a label is reserved to indicate
		/// a separator between menu items. By default, all menu
		/// items except for separators are enabled. </summary>
		/// <param name="label"> the label for this menu item. </param>
		/// <param name="s"> the instance of <code>MenuShortcut</code>
		///                       associated with this menu item. </param>
		/// <exception cref="HeadlessException"> if GraphicsEnvironment.isHeadless()
		/// returns true. </exception>
		/// <seealso cref= java.awt.GraphicsEnvironment#isHeadless
		/// @since       JDK1.1 </seealso>
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in .NET:
//ORIGINAL LINE: public MenuItem(String label, MenuShortcut s) throws HeadlessException
		public MenuItem(String label, MenuShortcut s)
		{
			this.Label_Renamed = label;
			this.Shortcut_Renamed = s;
		}

		/// <summary>
		/// Construct a name for this MenuComponent.  Called by getName() when
		/// the name is null.
		/// </summary>
		internal override String ConstructComponentName()
		{
			lock (typeof(MenuItem))
			{
				return @base + NameCounter++;
			}
		}

		/// <summary>
		/// Creates the menu item's peer.  The peer allows us to modify the
		/// appearance of the menu item without changing its functionality.
		/// </summary>
		public virtual void AddNotify()
		{
			lock (TreeLock)
			{
				if (Peer_Renamed == null)
				{
					Peer_Renamed = Toolkit.DefaultToolkit.CreateMenuItem(this);
				}
			}
		}

		/// <summary>
		/// Gets the label for this menu item. </summary>
		/// <returns>  the label of this menu item, or <code>null</code>
		///                   if this menu item has no label. </returns>
		/// <seealso cref=     java.awt.MenuItem#setLabel
		/// @since   JDK1.0 </seealso>
		public virtual String Label
		{
			get
			{
				return Label_Renamed;
			}
			set
			{
				lock (this)
				{
					this.Label_Renamed = value;
					MenuItemPeer peer = (MenuItemPeer)this.Peer_Renamed;
					if (peer != null)
					{
						peer.Label = value;
					}
				}
			}
		}


		/// <summary>
		/// Checks whether this menu item is enabled. </summary>
		/// <seealso cref=        java.awt.MenuItem#setEnabled
		/// @since      JDK1.0 </seealso>
		public virtual bool Enabled
		{
			get
			{
				return Enabled_Renamed;
			}
			set
			{
				lock (this)
				{
					Enable(value);
				}
			}
		}


		/// @deprecated As of JDK version 1.1,
		/// replaced by <code>setEnabled(boolean)</code>. 
		[Obsolete("As of JDK version 1.1,")]
		public virtual void Enable()
		{
			lock (this)
			{
				Enabled_Renamed = true;
				MenuItemPeer peer = (MenuItemPeer)this.Peer_Renamed;
				if (peer != null)
				{
					peer.Enabled = true;
				}
			}
		}

		/// @deprecated As of JDK version 1.1,
		/// replaced by <code>setEnabled(boolean)</code>. 
		[Obsolete("As of JDK version 1.1,")]
		public virtual void Enable(bool b)
		{
			if (b)
			{
				Enable();
			}
			else
			{
				Disable();
			}
		}

		/// @deprecated As of JDK version 1.1,
		/// replaced by <code>setEnabled(boolean)</code>. 
		[Obsolete("As of JDK version 1.1,")]
		public virtual void Disable()
		{
			lock (this)
			{
				Enabled_Renamed = false;
				MenuItemPeer peer = (MenuItemPeer)this.Peer_Renamed;
				if (peer != null)
				{
					peer.Enabled = false;
				}
			}
		}

		/// <summary>
		/// Get the <code>MenuShortcut</code> object associated with this
		/// menu item, </summary>
		/// <returns>      the menu shortcut associated with this menu item,
		///                   or <code>null</code> if none has been specified. </returns>
		/// <seealso cref=         java.awt.MenuItem#setShortcut
		/// @since       JDK1.1 </seealso>
		public virtual MenuShortcut Shortcut
		{
			get
			{
				return Shortcut_Renamed;
			}
			set
			{
				Shortcut_Renamed = value;
				MenuItemPeer peer = (MenuItemPeer)this.Peer_Renamed;
				if (peer != null)
				{
					peer.Label = Label_Renamed;
				}
			}
		}


		/// <summary>
		/// Delete any <code>MenuShortcut</code> object associated
		/// with this menu item.
		/// @since      JDK1.1
		/// </summary>
		public virtual void DeleteShortcut()
		{
			Shortcut_Renamed = null;
			MenuItemPeer peer = (MenuItemPeer)this.Peer_Renamed;
			if (peer != null)
			{
				peer.Label = Label_Renamed;
			}
		}

		/*
		 * Delete a matching MenuShortcut associated with this MenuItem.
		 * Used when iterating Menus.
		 */
		internal virtual void DeleteShortcut(MenuShortcut s)
		{
			if (s.Equals(Shortcut_Renamed))
			{
				Shortcut_Renamed = null;
				MenuItemPeer peer = (MenuItemPeer)this.Peer_Renamed;
				if (peer != null)
				{
					peer.Label = Label_Renamed;
				}
			}
		}

		/*
		 * The main goal of this method is to post an appropriate event
		 * to the event queue when menu shortcut is pressed. However,
		 * in subclasses this method may do more than just posting
		 * an event.
		 */
		internal virtual void DoMenuEvent(long when, int modifiers)
		{
			Toolkit.EventQueue.PostEvent(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, ActionCommand, when, modifiers));
		}

		/*
		 * Returns true if the item and all its ancestors are
		 * enabled, false otherwise
		 */
		private bool ItemEnabled
		{
			get
			{
				// Fix For 6185151: Menu shortcuts of all menuitems within a menu
				// should be disabled when the menu itself is disabled
				if (!Enabled)
				{
					return false;
				}
				MenuContainer container = Parent_NoClientCode;
				do
				{
					if (!(container is Menu))
					{
						return true;
					}
					Menu menu = (Menu)container;
					if (!menu.Enabled)
					{
						return false;
					}
					container = menu.Parent_NoClientCode;
				} while (container != null);
				return true;
			}
		}

		/*
		 * Post an ActionEvent to the target (on
		 * keydown) and the item is enabled.
		 * Returns true if there is an associated shortcut.
		 */
		internal virtual bool HandleShortcut(KeyEvent e)
		{
			MenuShortcut s = new MenuShortcut(e.KeyCode, (e.Modifiers & InputEvent.SHIFT_MASK) > 0);
			MenuShortcut sE = new MenuShortcut(e.ExtendedKeyCode, (e.Modifiers & InputEvent.SHIFT_MASK) > 0);
			// Fix For 6185151: Menu shortcuts of all menuitems within a menu
			// should be disabled when the menu itself is disabled
			if ((s.Equals(Shortcut_Renamed) || sE.Equals(Shortcut_Renamed)) && ItemEnabled)
			{
				// MenuShortcut match -- issue an event on keydown.
				if (e.ID == KeyEvent.KEY_PRESSED)
				{
					DoMenuEvent(e.When, e.Modifiers);
				}
				else
				{
					// silently eat key release.
				}
				return true;
			}
			return false;
		}

		internal virtual MenuItem GetShortcutMenuItem(MenuShortcut s)
		{
			return (s.Equals(Shortcut_Renamed)) ? this : null;
		}

		/// <summary>
		/// Enables event delivery to this menu item for events
		/// to be defined by the specified event mask parameter
		/// <para>
		/// Since event types are automatically enabled when a listener for
		/// that type is added to the menu item, this method only needs
		/// to be invoked by subclasses of <code>MenuItem</code> which desire to
		/// have the specified event types delivered to <code>processEvent</code>
		/// regardless of whether a listener is registered.
		/// 
		/// </para>
		/// </summary>
		/// <param name="eventsToEnable"> the event mask defining the event types </param>
		/// <seealso cref=         java.awt.MenuItem#processEvent </seealso>
		/// <seealso cref=         java.awt.MenuItem#disableEvents </seealso>
		/// <seealso cref=         java.awt.Component#enableEvents
		/// @since       JDK1.1 </seealso>
		protected internal void EnableEvents(long eventsToEnable)
		{
			EventMask |= eventsToEnable;
			NewEventsOnly = true;
		}

		/// <summary>
		/// Disables event delivery to this menu item for events
		/// defined by the specified event mask parameter.
		/// </summary>
		/// <param name="eventsToDisable"> the event mask defining the event types </param>
		/// <seealso cref=         java.awt.MenuItem#processEvent </seealso>
		/// <seealso cref=         java.awt.MenuItem#enableEvents </seealso>
		/// <seealso cref=         java.awt.Component#disableEvents
		/// @since       JDK1.1 </seealso>
		protected internal void DisableEvents(long eventsToDisable)
		{
			EventMask &= ~eventsToDisable;
		}

		/// <summary>
		/// Sets the command name of the action event that is fired
		/// by this menu item.
		/// <para>
		/// By default, the action command is set to the label of
		/// the menu item.
		/// </para>
		/// </summary>
		/// <param name="command">   the action command to be set
		///                                for this menu item. </param>
		/// <seealso cref=         java.awt.MenuItem#getActionCommand
		/// @since       JDK1.1 </seealso>
		public virtual String ActionCommand
		{
			set
			{
				ActionCommand_Renamed = value;
			}
			get
			{
				return ActionCommandImpl;
			}
		}


		// This is final so it can be called on the Toolkit thread.
		internal String ActionCommandImpl
		{
			get
			{
				return (ActionCommand_Renamed == null? Label_Renamed : ActionCommand_Renamed);
			}
		}

		/// <summary>
		/// Adds the specified action listener to receive action events
		/// from this menu item.
		/// If l is null, no exception is thrown and no action is performed.
		/// <para>Refer to <a href="doc-files/AWTThreadIssues.html#ListenersThreads"
		/// >AWT Threading Issues</a> for details on AWT's threading model.
		/// 
		/// </para>
		/// </summary>
		/// <param name="l"> the action listener. </param>
		/// <seealso cref=        #removeActionListener </seealso>
		/// <seealso cref=        #getActionListeners </seealso>
		/// <seealso cref=        java.awt.event.ActionEvent </seealso>
		/// <seealso cref=        java.awt.event.ActionListener
		/// @since      JDK1.1 </seealso>
		public virtual void AddActionListener(ActionListener l)
		{
			lock (this)
			{
				if (l == null)
				{
					return;
				}
				ActionListener = AWTEventMulticaster.Add(ActionListener, l);
				NewEventsOnly = true;
			}
		}

		/// <summary>
		/// Removes the specified action listener so it no longer receives
		/// action events from this menu item.
		/// If l is null, no exception is thrown and no action is performed.
		/// <para>Refer to <a href="doc-files/AWTThreadIssues.html#ListenersThreads"
		/// >AWT Threading Issues</a> for details on AWT's threading model.
		/// 
		/// </para>
		/// </summary>
		/// <param name="l"> the action listener. </param>
		/// <seealso cref=        #addActionListener </seealso>
		/// <seealso cref=        #getActionListeners </seealso>
		/// <seealso cref=        java.awt.event.ActionEvent </seealso>
		/// <seealso cref=        java.awt.event.ActionListener
		/// @since      JDK1.1 </seealso>
		public virtual void RemoveActionListener(ActionListener l)
		{
			lock (this)
			{
				if (l == null)
				{
					return;
				}
				ActionListener = AWTEventMulticaster.Remove(ActionListener, l);
			}
		}

		/// <summary>
		/// Returns an array of all the action listeners
		/// registered on this menu item.
		/// </summary>
		/// <returns> all of this menu item's <code>ActionListener</code>s
		///         or an empty array if no action
		///         listeners are currently registered
		/// </returns>
		/// <seealso cref=        #addActionListener </seealso>
		/// <seealso cref=        #removeActionListener </seealso>
		/// <seealso cref=        java.awt.event.ActionEvent </seealso>
		/// <seealso cref=        java.awt.event.ActionListener
		/// @since 1.4 </seealso>
		public virtual ActionListener[] ActionListeners
		{
			get
			{
				lock (this)
				{
					return GetListeners(typeof(ActionListener));
				}
			}
		}

		/// <summary>
		/// Returns an array of all the objects currently registered
		/// as <code><em>Foo</em>Listener</code>s
		/// upon this <code>MenuItem</code>.
		/// <code><em>Foo</em>Listener</code>s are registered using the
		/// <code>add<em>Foo</em>Listener</code> method.
		/// 
		/// <para>
		/// You can specify the <code>listenerType</code> argument
		/// with a class literal, such as
		/// <code><em>Foo</em>Listener.class</code>.
		/// For example, you can query a
		/// <code>MenuItem</code> <code>m</code>
		/// for its action listeners with the following code:
		/// 
		/// <pre>ActionListener[] als = (ActionListener[])(m.getListeners(ActionListener.class));</pre>
		/// 
		/// If no such listeners exist, this method returns an empty array.
		/// 
		/// </para>
		/// </summary>
		/// <param name="listenerType"> the type of listeners requested; this parameter
		///          should specify an interface that descends from
		///          <code>java.util.EventListener</code> </param>
		/// <returns> an array of all objects registered as
		///          <code><em>Foo</em>Listener</code>s on this menu item,
		///          or an empty array if no such
		///          listeners have been added </returns>
		/// <exception cref="ClassCastException"> if <code>listenerType</code>
		///          doesn't specify a class or interface that implements
		///          <code>java.util.EventListener</code>
		/// </exception>
		/// <seealso cref= #getActionListeners
		/// @since 1.3 </seealso>
		public virtual T[] getListeners<T>(Class listenerType) where T : java.util.EventListener
		{
			EventListener l = null;
			if (listenerType == typeof(ActionListener))
			{
				l = ActionListener;
			}
			return AWTEventMulticaster.GetListeners(l, listenerType);
		}

		/// <summary>
		/// Processes events on this menu item. If the event is an
		/// instance of <code>ActionEvent</code>, it invokes
		/// <code>processActionEvent</code>, another method
		/// defined by <code>MenuItem</code>.
		/// <para>
		/// Currently, menu items only support action events.
		/// </para>
		/// <para>Note that if the event parameter is <code>null</code>
		/// the behavior is unspecified and may result in an
		/// exception.
		/// 
		/// </para>
		/// </summary>
		/// <param name="e"> the event </param>
		/// <seealso cref=         java.awt.MenuItem#processActionEvent
		/// @since       JDK1.1 </seealso>
		protected internal override void ProcessEvent(AWTEvent e)
		{
			if (e is ActionEvent)
			{
				ProcessActionEvent((ActionEvent)e);
			}
		}

		// REMIND: remove when filtering is done at lower level
		internal override bool EventEnabled(AWTEvent e)
		{
			if (e.Id == ActionEvent.ACTION_PERFORMED)
			{
				if ((EventMask & AWTEvent.ACTION_EVENT_MASK) != 0 || ActionListener != null)
				{
					return true;
				}
				return false;
			}
			return base.EventEnabled(e);
		}

		/// <summary>
		/// Processes action events occurring on this menu item,
		/// by dispatching them to any registered
		/// <code>ActionListener</code> objects.
		/// This method is not called unless action events are
		/// enabled for this component. Action events are enabled
		/// when one of the following occurs:
		/// <ul>
		/// <li>An <code>ActionListener</code> object is registered
		/// via <code>addActionListener</code>.
		/// <li>Action events are enabled via <code>enableEvents</code>.
		/// </ul>
		/// <para>Note that if the event parameter is <code>null</code>
		/// the behavior is unspecified and may result in an
		/// exception.
		/// 
		/// </para>
		/// </summary>
		/// <param name="e"> the action event </param>
		/// <seealso cref=         java.awt.event.ActionEvent </seealso>
		/// <seealso cref=         java.awt.event.ActionListener </seealso>
		/// <seealso cref=         java.awt.MenuItem#enableEvents
		/// @since       JDK1.1 </seealso>
		protected internal virtual void ProcessActionEvent(ActionEvent e)
		{
			ActionListener listener = ActionListener;
			if (listener != null)
			{
				listener.ActionPerformed(e);
			}
		}

		/// <summary>
		/// Returns a string representing the state of this <code>MenuItem</code>.
		/// This method is intended to be used only for debugging purposes, and the
		/// content and format of the returned string may vary between
		/// implementations. The returned string may be empty but may not be
		/// <code>null</code>.
		/// </summary>
		/// <returns> the parameter string of this menu item </returns>
		public override String ParamString()
		{
			String str = ",label=" + Label_Renamed;
			if (Shortcut_Renamed != null)
			{
				str += ",shortcut=" + Shortcut_Renamed;
			}
			return base.ParamString() + str;
		}


		/* Serialization support.
		 */

		/// <summary>
		/// Menu item serialized data version.
		/// 
		/// @serial
		/// </summary>
		private int MenuItemSerializedDataVersion = 1;

		/// <summary>
		/// Writes default serializable fields to stream.  Writes
		/// a list of serializable <code>ActionListeners</code>
		/// as optional data. The non-serializable listeners are
		/// detected and no attempt is made to serialize them.
		/// </summary>
		/// <param name="s"> the <code>ObjectOutputStream</code> to write
		/// @serialData <code>null</code> terminated sequence of 0
		///   or more pairs; the pair consists of a <code>String</code>
		///   and an <code>Object</code>; the <code>String</code>
		///   indicates the type of object and is one of the following:
		///   <code>actionListenerK</code> indicating an
		///     <code>ActionListener</code> object
		/// </param>
		/// <seealso cref= AWTEventMulticaster#save(ObjectOutputStream, String, EventListener) </seealso>
		/// <seealso cref= #readObject(ObjectInputStream) </seealso>
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in .NET:
//ORIGINAL LINE: private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException
		private void WriteObject(ObjectOutputStream s)
		{
		  s.DefaultWriteObject();

		  AWTEventMulticaster.Save(s, ActionListenerK, ActionListener);
		  s.WriteObject(null);
		}

		/// <summary>
		/// Reads the <code>ObjectInputStream</code> and if it
		/// isn't <code>null</code> adds a listener to receive
		/// action events fired by the <code>Menu</code> Item.
		/// Unrecognized keys or values will be ignored.
		/// </summary>
		/// <param name="s"> the <code>ObjectInputStream</code> to read </param>
		/// <exception cref="HeadlessException"> if
		///   <code>GraphicsEnvironment.isHeadless</code> returns
		///   <code>true</code> </exception>
		/// <seealso cref= #removeActionListener(ActionListener) </seealso>
		/// <seealso cref= #addActionListener(ActionListener) </seealso>
		/// <seealso cref= #writeObject(ObjectOutputStream) </seealso>
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in .NET:
//ORIGINAL LINE: private void readObject(java.io.ObjectInputStream s) throws ClassNotFoundException, java.io.IOException, HeadlessException
		private void ReadObject(ObjectInputStream s)
		{
		  // HeadlessException will be thrown from MenuComponent's readObject
		  s.DefaultReadObject();

		  Object keyOrNull;
		  while (null != (keyOrNull = s.ReadObject()))
		  {
			String key = ((String)keyOrNull).intern();

			if (ActionListenerK == key)
			{
			  AddActionListener((ActionListener)(s.ReadObject()));
			}

			else // skip value for unrecognized key
			{
			  s.ReadObject();
			}
		  }
		}

		/// <summary>
		/// Initialize JNI field and method IDs
		/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Replace 'unknown' with the appropriate dll name:
		[DllImport("unknown")]
		private static extern void initIDs();


	/////////////////
	// Accessibility support
	////////////////

		/// <summary>
		/// Gets the AccessibleContext associated with this MenuItem.
		/// For menu items, the AccessibleContext takes the form of an
		/// AccessibleAWTMenuItem.
		/// A new AccessibleAWTMenuItem instance is created if necessary.
		/// </summary>
		/// <returns> an AccessibleAWTMenuItem that serves as the
		///         AccessibleContext of this MenuItem
		/// @since 1.3 </returns>
		public override AccessibleContext AccessibleContext
		{
			get
			{
				if (AccessibleContext_Renamed == null)
				{
					AccessibleContext_Renamed = new AccessibleAWTMenuItem(this);
				}
				return AccessibleContext_Renamed;
			}
		}

		/// <summary>
		/// Inner class of MenuItem used to provide default support for
		/// accessibility.  This class is not meant to be used directly by
		/// application developers, but is instead meant only to be
		/// subclassed by menu component developers.
		/// <para>
		/// This class implements accessibility support for the
		/// <code>MenuItem</code> class.  It provides an implementation of the
		/// Java Accessibility API appropriate to menu item user-interface elements.
		/// @since 1.3
		/// </para>
		/// </summary>
		protected internal class AccessibleAWTMenuItem : AccessibleAWTMenuComponent, AccessibleAction, AccessibleValue
		{
			private readonly MenuItem OuterInstance;

			public AccessibleAWTMenuItem(MenuItem outerInstance) : base(outerInstance)
			{
				this.OuterInstance = outerInstance;
			}

			/*
			 * JDK 1.3 serialVersionUID
			 */
			internal const long SerialVersionUID = -217847831945965825L;

			/// <summary>
			/// Get the accessible name of this object.
			/// </summary>
			/// <returns> the localized name of the object -- can be null if this
			/// object does not have a name </returns>
			public override String AccessibleName
			{
				get
				{
					if (accessibleName != null)
					{
						return accessibleName;
					}
					else
					{
						if (outerInstance.Label == null)
						{
							return base.AccessibleName;
						}
						else
						{
							return outerInstance.Label;
						}
					}
				}
			}

			/// <summary>
			/// Get the role of this object.
			/// </summary>
			/// <returns> an instance of AccessibleRole describing the role of the
			/// object </returns>
			public override AccessibleRole AccessibleRole
			{
				get
				{
					return AccessibleRole.MENU_ITEM;
				}
			}

			/// <summary>
			/// Get the AccessibleAction associated with this object.  In the
			/// implementation of the Java Accessibility API for this class,
			/// return this object, which is responsible for implementing the
			/// AccessibleAction interface on behalf of itself.
			/// </summary>
			/// <returns> this object </returns>
			public virtual AccessibleAction AccessibleAction
			{
				get
				{
					return this;
				}
			}

			/// <summary>
			/// Get the AccessibleValue associated with this object.  In the
			/// implementation of the Java Accessibility API for this class,
			/// return this object, which is responsible for implementing the
			/// AccessibleValue interface on behalf of itself.
			/// </summary>
			/// <returns> this object </returns>
			public virtual AccessibleValue AccessibleValue
			{
				get
				{
					return this;
				}
			}

			/// <summary>
			/// Returns the number of Actions available in this object.  The
			/// default behavior of a menu item is to have one action.
			/// </summary>
			/// <returns> 1, the number of Actions in this object </returns>
			public virtual int AccessibleActionCount
			{
				get
				{
					return 1;
				}
			}

			/// <summary>
			/// Return a description of the specified action of the object.
			/// </summary>
			/// <param name="i"> zero-based index of the actions </param>
			public virtual String GetAccessibleActionDescription(int i)
			{
				if (i == 0)
				{
					// [[[PENDING:  WDW -- need to provide a localized string]]]
					return "click";
				}
				else
				{
					return null;
				}
			}

			/// <summary>
			/// Perform the specified Action on the object
			/// </summary>
			/// <param name="i"> zero-based index of actions </param>
			/// <returns> true if the action was performed; otherwise false. </returns>
			public virtual bool DoAccessibleAction(int i)
			{
				if (i == 0)
				{
					// Simulate a button click
					Toolkit.EventQueue.PostEvent(new ActionEvent(OuterInstance, ActionEvent.ACTION_PERFORMED, OuterInstance.ActionCommand, EventQueue.MostRecentEventTime, 0));
					return true;
				}
				else
				{
					return false;
				}
			}

			/// <summary>
			/// Get the value of this object as a Number.
			/// </summary>
			/// <returns> An Integer of 0 if this isn't selected or an Integer of 1 if
			/// this is selected. </returns>
			/// <seealso cref= javax.swing.AbstractButton#isSelected() </seealso>
			public virtual Number CurrentAccessibleValue
			{
				get
				{
					return Convert.ToInt32(0);
				}
			}

			/// <summary>
			/// Set the value of this object as a Number.
			/// </summary>
			/// <returns> True if the value was set. </returns>
			public virtual bool SetCurrentAccessibleValue(Number n)
			{
				return false;
			}

			/// <summary>
			/// Get the minimum value of this object as a Number.
			/// </summary>
			/// <returns> An Integer of 0. </returns>
			public virtual Number MinimumAccessibleValue
			{
				get
				{
					return Convert.ToInt32(0);
				}
			}

			/// <summary>
			/// Get the maximum value of this object as a Number.
			/// </summary>
			/// <returns> An Integer of 0. </returns>
			public virtual Number MaximumAccessibleValue
			{
				get
				{
					return Convert.ToInt32(0);
				}
			}

		} // class AccessibleAWTMenuItem

	}

}