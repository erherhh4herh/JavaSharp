using System;
using System.Runtime.InteropServices;

/*
 * Copyright (c) 1995, 2013, Oracle and/or its affiliates. All rights reserved.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */
namespace java.awt
{



	/// <summary>
	/// A <code>TextField</code> object is a text component
	/// that allows for the editing of a single line of text.
	/// <para>
	/// For example, the following image depicts a frame with four
	/// text fields of varying widths. Two of these text fields
	/// display the predefined text <code>"Hello"</code>.
	/// </para>
	/// <para>
	/// <img src="doc-files/TextField-1.gif" alt="The preceding text describes this image."
	/// style="float:center; margin: 7px 10px;">
	/// </para>
	/// <para>
	/// Here is the code that produces these four text fields:
	/// 
	/// <hr><blockquote><pre>
	/// TextField tf1, tf2, tf3, tf4;
	/// // a blank text field
	/// tf1 = new TextField();
	/// // blank field of 20 columns
	/// tf2 = new TextField("", 20);
	/// // predefined text displayed
	/// tf3 = new TextField("Hello!");
	/// // predefined text in 30 columns
	/// tf4 = new TextField("Hello", 30);
	/// </pre></blockquote><hr>
	/// </para>
	/// <para>
	/// Every time the user types a key in the text field, one or
	/// more key events are sent to the text field.  A <code>KeyEvent</code>
	/// may be one of three types: keyPressed, keyReleased, or keyTyped.
	/// The properties of a key event indicate which of these types
	/// it is, as well as additional information about the event,
	/// such as what modifiers are applied to the key event and the
	/// time at which the event occurred.
	/// </para>
	/// <para>
	/// The key event is passed to every <code>KeyListener</code>
	/// or <code>KeyAdapter</code> object which registered to receive such
	/// events using the component's <code>addKeyListener</code> method.
	/// (<code>KeyAdapter</code> objects implement the
	/// <code>KeyListener</code> interface.)
	/// </para>
	/// <para>
	/// It is also possible to fire an <code>ActionEvent</code>.
	/// If action events are enabled for the text field, they may
	/// be fired by pressing the <code>Return</code> key.
	/// </para>
	/// <para>
	/// The <code>TextField</code> class's <code>processEvent</code>
	/// method examines the action event and passes it along to
	/// <code>processActionEvent</code>. The latter method redirects the
	/// event to any <code>ActionListener</code> objects that have
	/// registered to receive action events generated by this
	/// text field.
	/// 
	/// @author      Sami Shaio
	/// </para>
	/// </summary>
	/// <seealso cref=         java.awt.event.KeyEvent </seealso>
	/// <seealso cref=         java.awt.event.KeyAdapter </seealso>
	/// <seealso cref=         java.awt.event.KeyListener </seealso>
	/// <seealso cref=         java.awt.event.ActionEvent </seealso>
	/// <seealso cref=         java.awt.Component#addKeyListener </seealso>
	/// <seealso cref=         java.awt.TextField#processEvent </seealso>
	/// <seealso cref=         java.awt.TextField#processActionEvent </seealso>
	/// <seealso cref=         java.awt.TextField#addActionListener
	/// @since       JDK1.0 </seealso>
	public class TextField : TextComponent
	{

		/// <summary>
		/// The number of columns in the text field.
		/// A column is an approximate average character
		/// width that is platform-dependent.
		/// Guaranteed to be non-negative.
		/// 
		/// @serial </summary>
		/// <seealso cref= #setColumns(int) </seealso>
		/// <seealso cref= #getColumns() </seealso>
		internal int Columns_Renamed;

		/// <summary>
		/// The echo character, which is used when
		/// the user wishes to disguise the characters
		/// typed into the text field.
		/// The disguises are removed if echoChar = <code>0</code>.
		/// 
		/// @serial </summary>
		/// <seealso cref= #getEchoChar() </seealso>
		/// <seealso cref= #setEchoChar(char) </seealso>
		/// <seealso cref= #echoCharIsSet() </seealso>
		internal char EchoChar_Renamed;

		[NonSerialized]
		internal ActionListener ActionListener;

		private const String @base = "textfield";
		private static int NameCounter = 0;

		/*
		 * JDK 1.1 serialVersionUID
		 */
		private const long SerialVersionUID = -2966288784432217853L;

		/// <summary>
		/// Initialize JNI field and method ids
		/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Replace 'unknown' with the appropriate dll name:
		[DllImport("unknown")]
		private static extern void initIDs();

		static TextField()
		{
			/* ensure that the necessary native libraries are loaded */
			Toolkit.LoadLibraries();
			if (!GraphicsEnvironment.Headless)
			{
				initIDs();
			}
		}

		/// <summary>
		/// Constructs a new text field. </summary>
		/// <exception cref="HeadlessException"> if GraphicsEnvironment.isHeadless()
		/// returns true. </exception>
		/// <seealso cref= java.awt.GraphicsEnvironment#isHeadless </seealso>
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in .NET:
//ORIGINAL LINE: public TextField() throws HeadlessException
		public TextField() : this("", 0)
		{
		}

		/// <summary>
		/// Constructs a new text field initialized with the specified text. </summary>
		/// <param name="text">       the text to be displayed. If
		///             <code>text</code> is <code>null</code>, the empty
		///             string <code>""</code> will be displayed. </param>
		/// <exception cref="HeadlessException"> if GraphicsEnvironment.isHeadless()
		/// returns true. </exception>
		/// <seealso cref= java.awt.GraphicsEnvironment#isHeadless </seealso>
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in .NET:
//ORIGINAL LINE: public TextField(String text) throws HeadlessException
		public TextField(String text) : this(text, (text != null) ? text.Length() : 0)
		{
		}

		/// <summary>
		/// Constructs a new empty text field with the specified number
		/// of columns.  A column is an approximate average character
		/// width that is platform-dependent. </summary>
		/// <param name="columns">     the number of columns.  If
		///             <code>columns</code> is less than <code>0</code>,
		///             <code>columns</code> is set to <code>0</code>. </param>
		/// <exception cref="HeadlessException"> if GraphicsEnvironment.isHeadless()
		/// returns true. </exception>
		/// <seealso cref= java.awt.GraphicsEnvironment#isHeadless </seealso>
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in .NET:
//ORIGINAL LINE: public TextField(int columns) throws HeadlessException
		public TextField(int columns) : this("", columns)
		{
		}

		/// <summary>
		/// Constructs a new text field initialized with the specified text
		/// to be displayed, and wide enough to hold the specified
		/// number of columns. A column is an approximate average character
		/// width that is platform-dependent. </summary>
		/// <param name="text">       the text to be displayed. If
		///             <code>text</code> is <code>null</code>, the empty
		///             string <code>""</code> will be displayed. </param>
		/// <param name="columns">     the number of columns.  If
		///             <code>columns</code> is less than <code>0</code>,
		///             <code>columns</code> is set to <code>0</code>. </param>
		/// <exception cref="HeadlessException"> if GraphicsEnvironment.isHeadless()
		/// returns true. </exception>
		/// <seealso cref= java.awt.GraphicsEnvironment#isHeadless </seealso>
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in .NET:
//ORIGINAL LINE: public TextField(String text, int columns) throws HeadlessException
		public TextField(String text, int columns) : base(text)
		{
			this.Columns_Renamed = (columns >= 0) ? columns : 0;
		}

		/// <summary>
		/// Construct a name for this component.  Called by getName() when the
		/// name is null.
		/// </summary>
		internal override String ConstructComponentName()
		{
			lock (typeof(TextField))
			{
				return @base + NameCounter++;
			}
		}

		/// <summary>
		/// Creates the TextField's peer.  The peer allows us to modify the
		/// appearance of the TextField without changing its functionality.
		/// </summary>
		public override void AddNotify()
		{
			lock (TreeLock)
			{
				if (Peer_Renamed == null)
				{
					Peer_Renamed = Toolkit.CreateTextField(this);
				}
				base.AddNotify();
			}
		}

		/// <summary>
		/// Gets the character that is to be used for echoing.
		/// <para>
		/// An echo character is useful for text fields where
		/// user input should not be echoed to the screen, as in
		/// the case of a text field for entering a password.
		/// If <code>echoChar</code> = <code>0</code>, user
		/// input is echoed to the screen unchanged.
		/// </para>
		/// <para>
		/// A Java platform implementation may support only a limited,
		/// non-empty set of echo characters. This function returns the
		/// echo character originally requested via setEchoChar(). The echo
		/// character actually used by the TextField implementation might be
		/// different.
		/// </para>
		/// </summary>
		/// <returns>      the echo character for this text field. </returns>
		/// <seealso cref=         java.awt.TextField#echoCharIsSet </seealso>
		/// <seealso cref=         java.awt.TextField#setEchoChar </seealso>
		public virtual char EchoChar
		{
			get
			{
				return EchoChar_Renamed;
			}
			set
			{
				EchoCharacter = value;
			}
		}


		/// @deprecated As of JDK version 1.1,
		/// replaced by <code>setEchoChar(char)</code>. 
		[Obsolete("As of JDK version 1.1,")]
		public virtual char EchoCharacter
		{
			set
			{
				lock (this)
				{
					if (EchoChar_Renamed != value)
					{
						EchoChar_Renamed = value;
						TextFieldPeer peer = (TextFieldPeer)this.Peer_Renamed;
						if (peer != null)
						{
							peer.EchoChar = value;
						}
					}
				}
			}
		}

		/// <summary>
		/// Sets the text that is presented by this
		/// text component to be the specified text. </summary>
		/// <param name="t">   the new text. </param>
		/// <seealso cref=         java.awt.TextComponent#getText </seealso>
		public override String Text
		{
			set
			{
				base.Text = value;
    
				// This could change the preferred size of the Component.
				InvalidateIfValid();
			}
		}

		/// <summary>
		/// Indicates whether or not this text field has a
		/// character set for echoing.
		/// <para>
		/// An echo character is useful for text fields where
		/// user input should not be echoed to the screen, as in
		/// the case of a text field for entering a password.
		/// </para>
		/// </summary>
		/// <returns>     <code>true</code> if this text field has
		///                 a character set for echoing;
		///                 <code>false</code> otherwise. </returns>
		/// <seealso cref=        java.awt.TextField#setEchoChar </seealso>
		/// <seealso cref=        java.awt.TextField#getEchoChar </seealso>
		public virtual bool EchoCharIsSet()
		{
			return EchoChar_Renamed != 0;
		}

		/// <summary>
		/// Gets the number of columns in this text field. A column is an
		/// approximate average character width that is platform-dependent. </summary>
		/// <returns>     the number of columns. </returns>
		/// <seealso cref=        java.awt.TextField#setColumns
		/// @since      JDK1.1 </seealso>
		public virtual int Columns
		{
			get
			{
				return Columns_Renamed;
			}
			set
			{
				int oldVal;
				lock (this)
				{
					oldVal = this.Columns_Renamed;
					if (value < 0)
					{
						throw new IllegalArgumentException("columns less than zero.");
					}
					if (value != oldVal)
					{
						this.Columns_Renamed = value;
					}
				}
    
				if (value != oldVal)
				{
					Invalidate();
				}
			}
		}


		/// <summary>
		/// Gets the preferred size of this text field
		/// with the specified number of columns. </summary>
		/// <param name="columns"> the number of columns
		///                 in this text field. </param>
		/// <returns>    the preferred dimensions for
		///                 displaying this text field.
		/// @since     JDK1.1 </returns>
		public virtual Dimension GetPreferredSize(int columns)
		{
			return PreferredSize(columns);
		}

		/// @deprecated As of JDK version 1.1,
		/// replaced by <code>getPreferredSize(int)</code>. 
		[Obsolete("As of JDK version 1.1,")]
		public virtual Dimension PreferredSize(int columns)
		{
			lock (TreeLock)
			{
				TextFieldPeer peer = (TextFieldPeer)this.Peer_Renamed;
				return (peer != null) ? peer.GetPreferredSize(columns) : base.PreferredSize();
			}
		}

		/// <summary>
		/// Gets the preferred size of this text field. </summary>
		/// <returns>     the preferred dimensions for
		///                         displaying this text field.
		/// @since      JDK1.1 </returns>
		public override Dimension PreferredSize
		{
			get
			{
				return PreferredSize();
			}
		}

		/// @deprecated As of JDK version 1.1,
		/// replaced by <code>getPreferredSize()</code>. 
		[Obsolete("As of JDK version 1.1,")]
		public override Dimension PreferredSize()
		{
			lock (TreeLock)
			{
				return (Columns_Renamed > 0) ? PreferredSize(Columns_Renamed) : base.PreferredSize();
			}
		}

		/// <summary>
		/// Gets the minimum dimensions for a text field with
		/// the specified number of columns. </summary>
		/// <param name="columns">   the number of columns in
		///                          this text field.
		/// @since    JDK1.1 </param>
		public virtual Dimension GetMinimumSize(int columns)
		{
			return MinimumSize(columns);
		}

		/// @deprecated As of JDK version 1.1,
		/// replaced by <code>getMinimumSize(int)</code>. 
		[Obsolete("As of JDK version 1.1,")]
		public virtual Dimension MinimumSize(int columns)
		{
			lock (TreeLock)
			{
				TextFieldPeer peer = (TextFieldPeer)this.Peer_Renamed;
				return (peer != null) ? peer.GetMinimumSize(columns) : base.MinimumSize();
			}
		}

		/// <summary>
		/// Gets the minimum dimensions for this text field. </summary>
		/// <returns>     the minimum dimensions for
		///                  displaying this text field.
		/// @since      JDK1.1 </returns>
		public override Dimension MinimumSize
		{
			get
			{
				return MinimumSize();
			}
		}

		/// @deprecated As of JDK version 1.1,
		/// replaced by <code>getMinimumSize()</code>. 
		[Obsolete("As of JDK version 1.1,")]
		public override Dimension MinimumSize()
		{
			lock (TreeLock)
			{
				return (Columns_Renamed > 0) ? MinimumSize(Columns_Renamed) : base.MinimumSize();
			}
		}

		/// <summary>
		/// Adds the specified action listener to receive
		/// action events from this text field.
		/// If l is null, no exception is thrown and no action is performed.
		/// <para>Refer to <a href="doc-files/AWTThreadIssues.html#ListenersThreads"
		/// >AWT Threading Issues</a> for details on AWT's threading model.
		/// 
		/// </para>
		/// </summary>
		/// <param name="l"> the action listener. </param>
		/// <seealso cref=        #removeActionListener </seealso>
		/// <seealso cref=        #getActionListeners </seealso>
		/// <seealso cref=        java.awt.event.ActionListener
		/// @since      JDK1.1 </seealso>
		public virtual void AddActionListener(ActionListener l)
		{
			lock (this)
			{
				if (l == null)
				{
					return;
				}
				ActionListener = AWTEventMulticaster.Add(ActionListener, l);
				NewEventsOnly = true;
			}
		}

		/// <summary>
		/// Removes the specified action listener so that it no longer
		/// receives action events from this text field.
		/// If l is null, no exception is thrown and no action is performed.
		/// <para>Refer to <a href="doc-files/AWTThreadIssues.html#ListenersThreads"
		/// >AWT Threading Issues</a> for details on AWT's threading model.
		/// 
		/// </para>
		/// </summary>
		/// <param name="l"> the action listener. </param>
		/// <seealso cref=             #addActionListener </seealso>
		/// <seealso cref=             #getActionListeners </seealso>
		/// <seealso cref=             java.awt.event.ActionListener
		/// @since           JDK1.1 </seealso>
		public virtual void RemoveActionListener(ActionListener l)
		{
			lock (this)
			{
				if (l == null)
				{
					return;
				}
				ActionListener = AWTEventMulticaster.Remove(ActionListener, l);
			}
		}

		/// <summary>
		/// Returns an array of all the action listeners
		/// registered on this textfield.
		/// </summary>
		/// <returns> all of this textfield's <code>ActionListener</code>s
		///         or an empty array if no action
		///         listeners are currently registered
		/// </returns>
		/// <seealso cref= #addActionListener </seealso>
		/// <seealso cref= #removeActionListener </seealso>
		/// <seealso cref= java.awt.event.ActionListener
		/// @since 1.4 </seealso>
		public virtual ActionListener[] ActionListeners
		{
			get
			{
				lock (this)
				{
					return GetListeners(typeof(ActionListener));
				}
			}
		}

		/// <summary>
		/// Returns an array of all the objects currently registered
		/// as <code><em>Foo</em>Listener</code>s
		/// upon this <code>TextField</code>.
		/// <code><em>Foo</em>Listener</code>s are registered using the
		/// <code>add<em>Foo</em>Listener</code> method.
		/// 
		/// <para>
		/// You can specify the <code>listenerType</code> argument
		/// with a class literal, such as
		/// <code><em>Foo</em>Listener.class</code>.
		/// For example, you can query a
		/// <code>TextField</code> <code>t</code>
		/// for its action listeners with the following code:
		/// 
		/// <pre>ActionListener[] als = (ActionListener[])(t.getListeners(ActionListener.class));</pre>
		/// 
		/// If no such listeners exist, this method returns an empty array.
		/// 
		/// </para>
		/// </summary>
		/// <param name="listenerType"> the type of listeners requested; this parameter
		///          should specify an interface that descends from
		///          <code>java.util.EventListener</code> </param>
		/// <returns> an array of all objects registered as
		///          <code><em>Foo</em>Listener</code>s on this textfield,
		///          or an empty array if no such
		///          listeners have been added </returns>
		/// <exception cref="ClassCastException"> if <code>listenerType</code>
		///          doesn't specify a class or interface that implements
		///          <code>java.util.EventListener</code>
		/// </exception>
		/// <seealso cref= #getActionListeners
		/// @since 1.3 </seealso>
		public override T[] getListeners<T>(Class listenerType) where T : java.util.EventListener
		{
			EventListener l = null;
			if (listenerType == typeof(ActionListener))
			{
				l = ActionListener;
			}
			else
			{
				return base.GetListeners(listenerType);
			}
			return AWTEventMulticaster.GetListeners(l, listenerType);
		}

		// REMIND: remove when filtering is done at lower level
		internal override bool EventEnabled(AWTEvent e)
		{
			if (e.Id == ActionEvent.ACTION_PERFORMED)
			{
				if ((EventMask & AWTEvent.ACTION_EVENT_MASK) != 0 || ActionListener != null)
				{
					return true;
				}
				return false;
			}
			return base.EventEnabled(e);
		}

		/// <summary>
		/// Processes events on this text field. If the event
		/// is an instance of <code>ActionEvent</code>,
		/// it invokes the <code>processActionEvent</code>
		/// method. Otherwise, it invokes <code>processEvent</code>
		/// on the superclass.
		/// <para>Note that if the event parameter is <code>null</code>
		/// the behavior is unspecified and may result in an
		/// exception.
		/// 
		/// </para>
		/// </summary>
		/// <param name="e"> the event </param>
		/// <seealso cref=        java.awt.event.ActionEvent </seealso>
		/// <seealso cref=        java.awt.TextField#processActionEvent
		/// @since      JDK1.1 </seealso>
		protected internal override void ProcessEvent(AWTEvent e)
		{
			if (e is ActionEvent)
			{
				ProcessActionEvent((ActionEvent)e);
				return;
			}
			base.ProcessEvent(e);
		}

		/// <summary>
		/// Processes action events occurring on this text field by
		/// dispatching them to any registered
		/// <code>ActionListener</code> objects.
		/// <para>
		/// This method is not called unless action events are
		/// enabled for this component. Action events are enabled
		/// when one of the following occurs:
		/// <ul>
		/// <li>An <code>ActionListener</code> object is registered
		/// via <code>addActionListener</code>.
		/// <li>Action events are enabled via <code>enableEvents</code>.
		/// </ul>
		/// </para>
		/// <para>Note that if the event parameter is <code>null</code>
		/// the behavior is unspecified and may result in an
		/// exception.
		/// 
		/// </para>
		/// </summary>
		/// <param name="e"> the action event </param>
		/// <seealso cref=         java.awt.event.ActionListener </seealso>
		/// <seealso cref=         java.awt.TextField#addActionListener </seealso>
		/// <seealso cref=         java.awt.Component#enableEvents
		/// @since       JDK1.1 </seealso>
		protected internal virtual void ProcessActionEvent(ActionEvent e)
		{
			ActionListener listener = ActionListener;
			if (listener != null)
			{
				listener.ActionPerformed(e);
			}
		}

		/// <summary>
		/// Returns a string representing the state of this <code>TextField</code>.
		/// This method is intended to be used only for debugging purposes, and the
		/// content and format of the returned string may vary between
		/// implementations. The returned string may be empty but may not be
		/// <code>null</code>.
		/// </summary>
		/// <returns>      the parameter string of this text field </returns>
		protected internal override String ParamString()
		{
			String str = base.ParamString();
			if (EchoChar_Renamed != 0)
			{
				str += ",echo=" + EchoChar_Renamed;
			}
			return str;
		}


		/*
		 * Serialization support.
		 */
		/// <summary>
		/// The textField Serialized Data Version.
		/// 
		/// @serial
		/// </summary>
		private int TextFieldSerializedDataVersion = 1;

		/// <summary>
		/// Writes default serializable fields to stream.  Writes
		/// a list of serializable ActionListener(s) as optional data.
		/// The non-serializable ActionListener(s) are detected and
		/// no attempt is made to serialize them.
		/// 
		/// @serialData Null terminated sequence of zero or more pairs.
		///             A pair consists of a String and Object.
		///             The String indicates the type of object and
		///             is one of the following :
		///             ActionListenerK indicating and ActionListener object.
		/// </summary>
		/// <seealso cref= AWTEventMulticaster#save(ObjectOutputStream, String, EventListener) </seealso>
		/// <seealso cref= java.awt.Component#actionListenerK </seealso>
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in .NET:
//ORIGINAL LINE: private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException
		private void WriteObject(ObjectOutputStream s)
		{
			s.DefaultWriteObject();

			AWTEventMulticaster.Save(s, ActionListenerK, ActionListener);
			s.WriteObject(null);
		}

		/// <summary>
		/// Read the ObjectInputStream and if it isn't null,
		/// add a listener to receive action events fired by the
		/// TextField.  Unrecognized keys or values will be
		/// ignored.
		/// </summary>
		/// <exception cref="HeadlessException"> if
		/// <code>GraphicsEnvironment.isHeadless()</code> returns
		/// <code>true</code> </exception>
		/// <seealso cref= #removeActionListener(ActionListener) </seealso>
		/// <seealso cref= #addActionListener(ActionListener) </seealso>
		/// <seealso cref= java.awt.GraphicsEnvironment#isHeadless </seealso>
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in .NET:
//ORIGINAL LINE: private void readObject(java.io.ObjectInputStream s) throws ClassNotFoundException, java.io.IOException, HeadlessException
		private void ReadObject(ObjectInputStream s)
		{
			// HeadlessException will be thrown by TextComponent's readObject
			s.DefaultReadObject();

			// Make sure the state we just read in for columns has legal values
			if (Columns_Renamed < 0)
			{
				Columns_Renamed = 0;
			}

			// Read in listeners, if any
			Object keyOrNull;
			while (null != (keyOrNull = s.ReadObject()))
			{
				String key = ((String)keyOrNull).intern();

				if (ActionListenerK == key)
				{
					AddActionListener((ActionListener)(s.ReadObject()));
				}
				else
				{
					// skip value for unrecognized key
					s.ReadObject();
				}
			}
		}


	/////////////////
	// Accessibility support
	////////////////


		/// <summary>
		/// Gets the AccessibleContext associated with this TextField.
		/// For text fields, the AccessibleContext takes the form of an
		/// AccessibleAWTTextField.
		/// A new AccessibleAWTTextField instance is created if necessary.
		/// </summary>
		/// <returns> an AccessibleAWTTextField that serves as the
		///         AccessibleContext of this TextField
		/// @since 1.3 </returns>
		public override AccessibleContext AccessibleContext
		{
			get
			{
				if (AccessibleContext_Renamed == null)
				{
					AccessibleContext_Renamed = new AccessibleAWTTextField(this);
				}
				return AccessibleContext_Renamed;
			}
		}

		/// <summary>
		/// This class implements accessibility support for the
		/// <code>TextField</code> class.  It provides an implementation of the
		/// Java Accessibility API appropriate to text field user-interface elements.
		/// @since 1.3
		/// </summary>
		protected internal class AccessibleAWTTextField : AccessibleAWTTextComponent
		{
			private readonly TextField OuterInstance;

			public AccessibleAWTTextField(TextField outerInstance) : base(outerInstance)
			{
				this.OuterInstance = outerInstance;
			}

			/*
			 * JDK 1.3 serialVersionUID
			 */
			internal const long SerialVersionUID = 6219164359235943158L;

			/// <summary>
			/// Gets the state set of this object.
			/// </summary>
			/// <returns> an instance of AccessibleStateSet describing the states
			/// of the object </returns>
			/// <seealso cref= AccessibleState </seealso>
			public override AccessibleStateSet AccessibleStateSet
			{
				get
				{
					AccessibleStateSet states = base.AccessibleStateSet;
					states.add(AccessibleState.SINGLE_LINE);
					return states;
				}
			}
		}

	}

}