using System;
using System.Runtime.InteropServices;

/*
 * Copyright (c) 1995, 2013, Oracle and/or its affiliates. All rights reserved.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */

namespace java.awt
{


	/// <summary>
	/// This class creates a labeled button. The application can cause
	/// some action to happen when the button is pushed. This image
	/// depicts three views of a "<code>Quit</code>" button as it appears
	/// under the Solaris operating system:
	/// <para>
	/// <img src="doc-files/Button-1.gif" alt="The following context describes the graphic"
	/// style="float:center; margin: 7px 10px;">
	/// </para>
	/// <para>
	/// The first view shows the button as it appears normally.
	/// The second view shows the button
	/// when it has input focus. Its outline is darkened to let the
	/// user know that it is an active object. The third view shows the
	/// button when the user clicks the mouse over the button, and thus
	/// requests that an action be performed.
	/// </para>
	/// <para>
	/// The gesture of clicking on a button with the mouse
	/// is associated with one instance of <code>ActionEvent</code>,
	/// which is sent out when the mouse is both pressed and released
	/// over the button. If an application is interested in knowing
	/// when the button has been pressed but not released, as a separate
	/// gesture, it can specialize <code>processMouseEvent</code>,
	/// or it can register itself as a listener for mouse events by
	/// calling <code>addMouseListener</code>. Both of these methods are
	/// defined by <code>Component</code>, the abstract superclass of
	/// all components.
	/// </para>
	/// <para>
	/// When a button is pressed and released, AWT sends an instance
	/// of <code>ActionEvent</code> to the button, by calling
	/// <code>processEvent</code> on the button. The button's
	/// <code>processEvent</code> method receives all events
	/// for the button; it passes an action event along by
	/// calling its own <code>processActionEvent</code> method.
	/// The latter method passes the action event on to any action
	/// listeners that have registered an interest in action
	/// events generated by this button.
	/// </para>
	/// <para>
	/// If an application wants to perform some action based on
	/// a button being pressed and released, it should implement
	/// <code>ActionListener</code> and register the new listener
	/// to receive events from this button, by calling the button's
	/// <code>addActionListener</code> method. The application can
	/// make use of the button's action command as a messaging protocol.
	/// 
	/// @author      Sami Shaio
	/// </para>
	/// </summary>
	/// <seealso cref=         java.awt.event.ActionEvent </seealso>
	/// <seealso cref=         java.awt.event.ActionListener </seealso>
	/// <seealso cref=         java.awt.Component#processMouseEvent </seealso>
	/// <seealso cref=         java.awt.Component#addMouseListener
	/// @since       JDK1.0 </seealso>
	public class Button : Component, Accessible
	{

		/// <summary>
		/// The button's label.  This value may be null.
		/// @serial </summary>
		/// <seealso cref= #getLabel() </seealso>
		/// <seealso cref= #setLabel(String) </seealso>
		internal String Label_Renamed;

		/// <summary>
		/// The action to be performed once a button has been
		/// pressed.  This value may be null.
		/// @serial </summary>
		/// <seealso cref= #getActionCommand() </seealso>
		/// <seealso cref= #setActionCommand(String) </seealso>
		internal String ActionCommand_Renamed;

		[NonSerialized]
		internal ActionListener ActionListener;

		private const String @base = "button";
		private static int NameCounter = 0;

		/*
		 * JDK 1.1 serialVersionUID
		 */
		private const long SerialVersionUID = -8774683716313001058L;


		static Button()
		{
			/* ensure that the necessary native libraries are loaded */
			Toolkit.LoadLibraries();
			if (!GraphicsEnvironment.Headless)
			{
				initIDs();
			}
		}

		/// <summary>
		/// Initialize JNI field and method IDs for fields that may be
		/// accessed from C.
		/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Replace 'unknown' with the appropriate dll name:
		[DllImport("unknown")]
		private static extern void initIDs();

		/// <summary>
		/// Constructs a button with an empty string for its label.
		/// </summary>
		/// <exception cref="HeadlessException"> if GraphicsEnvironment.isHeadless()
		/// returns true </exception>
		/// <seealso cref= java.awt.GraphicsEnvironment#isHeadless </seealso>
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in .NET:
//ORIGINAL LINE: public Button() throws HeadlessException
		public Button() : this("")
		{
		}

		/// <summary>
		/// Constructs a button with the specified label.
		/// </summary>
		/// <param name="label">  a string label for the button, or
		///               <code>null</code> for no label </param>
		/// <exception cref="HeadlessException"> if GraphicsEnvironment.isHeadless()
		/// returns true </exception>
		/// <seealso cref= java.awt.GraphicsEnvironment#isHeadless </seealso>
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in .NET:
//ORIGINAL LINE: public Button(String label) throws HeadlessException
		public Button(String label)
		{
			GraphicsEnvironment.CheckHeadless();
			this.Label_Renamed = label;
		}

		/// <summary>
		/// Construct a name for this component.  Called by getName() when the
		/// name is null.
		/// </summary>
		internal override String ConstructComponentName()
		{
			lock (typeof(Button))
			{
				return @base + NameCounter++;
			}
		}

		/// <summary>
		/// Creates the peer of the button.  The button's peer allows the
		/// application to change the look of the button without changing
		/// its functionality.
		/// </summary>
		/// <seealso cref=     java.awt.Toolkit#createButton(java.awt.Button) </seealso>
		/// <seealso cref=     java.awt.Component#getToolkit() </seealso>
		public override void AddNotify()
		{
			lock (TreeLock)
			{
				if (Peer_Renamed == null)
				{
					Peer_Renamed = Toolkit.CreateButton(this);
				}
				base.AddNotify();
			}
		}

		/// <summary>
		/// Gets the label of this button.
		/// </summary>
		/// <returns>    the button's label, or <code>null</code>
		///                if the button has no label. </returns>
		/// <seealso cref=       java.awt.Button#setLabel </seealso>
		public virtual String Label
		{
			get
			{
				return Label_Renamed;
			}
			set
			{
				bool testvalid = false;
    
				lock (this)
				{
					if (value != this.Label_Renamed && (this.Label_Renamed == null || !this.Label_Renamed.Equals(value)))
					{
						this.Label_Renamed = value;
						ButtonPeer peer = (ButtonPeer)this.Peer_Renamed;
						if (peer != null)
						{
							peer.Label = value;
						}
						testvalid = true;
					}
				}
    
				// This could change the preferred size of the Component.
				if (testvalid)
				{
					InvalidateIfValid();
				}
			}
		}


		/// <summary>
		/// Sets the command name for the action event fired
		/// by this button. By default this action command is
		/// set to match the label of the button.
		/// </summary>
		/// <param name="command">  a string used to set the button's
		///                  action command.
		///            If the string is <code>null</code> then the action command
		///            is set to match the label of the button. </param>
		/// <seealso cref=       java.awt.event.ActionEvent
		/// @since     JDK1.1 </seealso>
		public virtual String ActionCommand
		{
			set
			{
				ActionCommand_Renamed = value;
			}
			get
			{
				return (ActionCommand_Renamed == null? Label_Renamed : ActionCommand_Renamed);
			}
		}


		/// <summary>
		/// Adds the specified action listener to receive action events from
		/// this button. Action events occur when a user presses or releases
		/// the mouse over this button.
		/// If l is null, no exception is thrown and no action is performed.
		/// <para>Refer to <a href="doc-files/AWTThreadIssues.html#ListenersThreads"
		/// >AWT Threading Issues</a> for details on AWT's threading model.
		/// 
		/// </para>
		/// </summary>
		/// <param name="l"> the action listener </param>
		/// <seealso cref=           #removeActionListener </seealso>
		/// <seealso cref=           #getActionListeners </seealso>
		/// <seealso cref=           java.awt.event.ActionListener
		/// @since         JDK1.1 </seealso>
		public virtual void AddActionListener(ActionListener l)
		{
			lock (this)
			{
				if (l == null)
				{
					return;
				}
				ActionListener = AWTEventMulticaster.Add(ActionListener, l);
				NewEventsOnly = true;
			}
		}

		/// <summary>
		/// Removes the specified action listener so that it no longer
		/// receives action events from this button. Action events occur
		/// when a user presses or releases the mouse over this button.
		/// If l is null, no exception is thrown and no action is performed.
		/// <para>Refer to <a href="doc-files/AWTThreadIssues.html#ListenersThreads"
		/// >AWT Threading Issues</a> for details on AWT's threading model.
		/// 
		/// </para>
		/// </summary>
		/// <param name="l">     the action listener </param>
		/// <seealso cref=             #addActionListener </seealso>
		/// <seealso cref=             #getActionListeners </seealso>
		/// <seealso cref=             java.awt.event.ActionListener
		/// @since           JDK1.1 </seealso>
		public virtual void RemoveActionListener(ActionListener l)
		{
			lock (this)
			{
				if (l == null)
				{
					return;
				}
				ActionListener = AWTEventMulticaster.Remove(ActionListener, l);
			}
		}

		/// <summary>
		/// Returns an array of all the action listeners
		/// registered on this button.
		/// </summary>
		/// <returns> all of this button's <code>ActionListener</code>s
		///         or an empty array if no action
		///         listeners are currently registered
		/// </returns>
		/// <seealso cref=             #addActionListener </seealso>
		/// <seealso cref=             #removeActionListener </seealso>
		/// <seealso cref=             java.awt.event.ActionListener
		/// @since 1.4 </seealso>
		public virtual ActionListener[] ActionListeners
		{
			get
			{
				lock (this)
				{
					return GetListeners(typeof(ActionListener));
				}
			}
		}

		/// <summary>
		/// Returns an array of all the objects currently registered
		/// as <code><em>Foo</em>Listener</code>s
		/// upon this <code>Button</code>.
		/// <code><em>Foo</em>Listener</code>s are registered using the
		/// <code>add<em>Foo</em>Listener</code> method.
		/// 
		/// <para>
		/// You can specify the <code>listenerType</code> argument
		/// with a class literal, such as
		/// <code><em>Foo</em>Listener.class</code>.
		/// For example, you can query a
		/// <code>Button</code> <code>b</code>
		/// for its action listeners with the following code:
		/// 
		/// <pre>ActionListener[] als = (ActionListener[])(b.getListeners(ActionListener.class));</pre>
		/// 
		/// If no such listeners exist, this method returns an empty array.
		/// 
		/// </para>
		/// </summary>
		/// <param name="listenerType"> the type of listeners requested; this parameter
		///          should specify an interface that descends from
		///          <code>java.util.EventListener</code> </param>
		/// <returns> an array of all objects registered as
		///          <code><em>Foo</em>Listener</code>s on this button,
		///          or an empty array if no such
		///          listeners have been added </returns>
		/// <exception cref="ClassCastException"> if <code>listenerType</code>
		///          doesn't specify a class or interface that implements
		///          <code>java.util.EventListener</code>
		/// </exception>
		/// <seealso cref= #getActionListeners
		/// @since 1.3 </seealso>
		public override T[] getListeners<T>(Class listenerType) where T : java.util.EventListener
		{
			EventListener l = null;
			if (listenerType == typeof(ActionListener))
			{
				l = ActionListener;
			}
			else
			{
				return base.GetListeners(listenerType);
			}
			return AWTEventMulticaster.GetListeners(l, listenerType);
		}

		// REMIND: remove when filtering is done at lower level
		internal override bool EventEnabled(AWTEvent e)
		{
			if (e.Id == ActionEvent.ACTION_PERFORMED)
			{
				if ((EventMask & AWTEvent.ACTION_EVENT_MASK) != 0 || ActionListener != null)
				{
					return true;
				}
				return false;
			}
			return base.EventEnabled(e);
		}

		/// <summary>
		/// Processes events on this button. If an event is
		/// an instance of <code>ActionEvent</code>, this method invokes
		/// the <code>processActionEvent</code> method. Otherwise,
		/// it invokes <code>processEvent</code> on the superclass.
		/// <para>Note that if the event parameter is <code>null</code>
		/// the behavior is unspecified and may result in an
		/// exception.
		/// 
		/// </para>
		/// </summary>
		/// <param name="e"> the event </param>
		/// <seealso cref=          java.awt.event.ActionEvent </seealso>
		/// <seealso cref=          java.awt.Button#processActionEvent
		/// @since        JDK1.1 </seealso>
		protected internal override void ProcessEvent(AWTEvent e)
		{
			if (e is ActionEvent)
			{
				ProcessActionEvent((ActionEvent)e);
				return;
			}
			base.ProcessEvent(e);
		}

		/// <summary>
		/// Processes action events occurring on this button
		/// by dispatching them to any registered
		/// <code>ActionListener</code> objects.
		/// <para>
		/// This method is not called unless action events are
		/// enabled for this button. Action events are enabled
		/// when one of the following occurs:
		/// <ul>
		/// <li>An <code>ActionListener</code> object is registered
		/// via <code>addActionListener</code>.
		/// <li>Action events are enabled via <code>enableEvents</code>.
		/// </ul>
		/// </para>
		/// <para>Note that if the event parameter is <code>null</code>
		/// the behavior is unspecified and may result in an
		/// exception.
		/// 
		/// </para>
		/// </summary>
		/// <param name="e"> the action event </param>
		/// <seealso cref=         java.awt.event.ActionListener </seealso>
		/// <seealso cref=         java.awt.Button#addActionListener </seealso>
		/// <seealso cref=         java.awt.Component#enableEvents
		/// @since       JDK1.1 </seealso>
		protected internal virtual void ProcessActionEvent(ActionEvent e)
		{
			ActionListener listener = ActionListener;
			if (listener != null)
			{
				listener.ActionPerformed(e);
			}
		}

		/// <summary>
		/// Returns a string representing the state of this <code>Button</code>.
		/// This method is intended to be used only for debugging purposes, and the
		/// content and format of the returned string may vary between
		/// implementations. The returned string may be empty but may not be
		/// <code>null</code>.
		/// </summary>
		/// <returns>     the parameter string of this button </returns>
		protected internal override String ParamString()
		{
			return base.ParamString() + ",label=" + Label_Renamed;
		}


		/* Serialization support.
		 */

		/*
		 * Button Serial Data Version.
		 * @serial
		 */
		private int ButtonSerializedDataVersion = 1;

		/// <summary>
		/// Writes default serializable fields to stream.  Writes
		/// a list of serializable <code>ActionListeners</code>
		/// as optional data.  The non-serializable
		/// <code>ActionListeners</code> are detected and
		/// no attempt is made to serialize them.
		/// 
		/// @serialData <code>null</code> terminated sequence of 0 or
		///   more pairs: the pair consists of a <code>String</code>
		///   and an <code>Object</code>; the <code>String</code>
		///   indicates the type of object and is one of the following:
		///   <code>actionListenerK</code> indicating an
		///     <code>ActionListener</code> object
		/// </summary>
		/// <param name="s"> the <code>ObjectOutputStream</code> to write </param>
		/// <seealso cref= AWTEventMulticaster#save(ObjectOutputStream, String, EventListener) </seealso>
		/// <seealso cref= java.awt.Component#actionListenerK </seealso>
		/// <seealso cref= #readObject(ObjectInputStream) </seealso>
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in .NET:
//ORIGINAL LINE: private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException
		private void WriteObject(ObjectOutputStream s)
		{
		  s.DefaultWriteObject();

		  AWTEventMulticaster.Save(s, ActionListenerK, ActionListener);
		  s.WriteObject(null);
		}

		/// <summary>
		/// Reads the <code>ObjectInputStream</code> and if
		/// it isn't <code>null</code> adds a listener to
		/// receive action events fired by the button.
		/// Unrecognized keys or values will be ignored.
		/// </summary>
		/// <param name="s"> the <code>ObjectInputStream</code> to read </param>
		/// <exception cref="HeadlessException"> if
		///   <code>GraphicsEnvironment.isHeadless</code> returns
		///   <code>true</code>
		/// @serial </exception>
		/// <seealso cref= #removeActionListener(ActionListener) </seealso>
		/// <seealso cref= #addActionListener(ActionListener) </seealso>
		/// <seealso cref= java.awt.GraphicsEnvironment#isHeadless </seealso>
		/// <seealso cref= #writeObject(ObjectOutputStream) </seealso>
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in .NET:
//ORIGINAL LINE: private void readObject(java.io.ObjectInputStream s) throws ClassNotFoundException, java.io.IOException, HeadlessException
		private void ReadObject(ObjectInputStream s)
		{
		  GraphicsEnvironment.CheckHeadless();
		  s.DefaultReadObject();

		  Object keyOrNull;
		  while (null != (keyOrNull = s.ReadObject()))
		  {
			String key = ((String)keyOrNull).intern();

			if (ActionListenerK == key)
			{
			  AddActionListener((ActionListener)(s.ReadObject()));
			}

			else // skip value for unrecognized key
			{
			  s.ReadObject();
			}
		  }
		}


	/////////////////
	// Accessibility support
	////////////////

		/// <summary>
		/// Gets the <code>AccessibleContext</code> associated with
		/// this <code>Button</code>. For buttons, the
		/// <code>AccessibleContext</code> takes the form of an
		/// <code>AccessibleAWTButton</code>.
		/// A new <code>AccessibleAWTButton</code> instance is
		/// created if necessary.
		/// </summary>
		/// <returns> an <code>AccessibleAWTButton</code> that serves as the
		///         <code>AccessibleContext</code> of this <code>Button</code>
		/// @beaninfo
		///       expert: true
		///  description: The AccessibleContext associated with this Button.
		/// @since 1.3 </returns>
		public override AccessibleContext AccessibleContext
		{
			get
			{
				if (AccessibleContext_Renamed == null)
				{
					AccessibleContext_Renamed = new AccessibleAWTButton(this);
				}
				return AccessibleContext_Renamed;
			}
		}

		/// <summary>
		/// This class implements accessibility support for the
		/// <code>Button</code> class.  It provides an implementation of the
		/// Java Accessibility API appropriate to button user-interface elements.
		/// @since 1.3
		/// </summary>
		protected internal class AccessibleAWTButton : AccessibleAWTComponent, AccessibleAction, AccessibleValue
		{
			private readonly Button OuterInstance;

			public AccessibleAWTButton(Button outerInstance) : base(outerInstance)
			{
				this.OuterInstance = outerInstance;
			}

			/*
			 * JDK 1.3 serialVersionUID
			 */
			internal const long SerialVersionUID = -5932203980244017102L;

			/// <summary>
			/// Get the accessible name of this object.
			/// </summary>
			/// <returns> the localized name of the object -- can be null if this
			/// object does not have a name </returns>
			public override String AccessibleName
			{
				get
				{
					if (accessibleName != null)
					{
						return accessibleName;
					}
					else
					{
						if (outerInstance.Label == null)
						{
							return base.AccessibleName;
						}
						else
						{
							return outerInstance.Label;
						}
					}
				}
			}

			/// <summary>
			/// Get the AccessibleAction associated with this object.  In the
			/// implementation of the Java Accessibility API for this class,
			/// return this object, which is responsible for implementing the
			/// AccessibleAction interface on behalf of itself.
			/// </summary>
			/// <returns> this object </returns>
			public virtual AccessibleAction AccessibleAction
			{
				get
				{
					return this;
				}
			}

			/// <summary>
			/// Get the AccessibleValue associated with this object.  In the
			/// implementation of the Java Accessibility API for this class,
			/// return this object, which is responsible for implementing the
			/// AccessibleValue interface on behalf of itself.
			/// </summary>
			/// <returns> this object </returns>
			public virtual AccessibleValue AccessibleValue
			{
				get
				{
					return this;
				}
			}

			/// <summary>
			/// Returns the number of Actions available in this object.  The
			/// default behavior of a button is to have one action - toggle
			/// the button.
			/// </summary>
			/// <returns> 1, the number of Actions in this object </returns>
			public virtual int AccessibleActionCount
			{
				get
				{
					return 1;
				}
			}

			/// <summary>
			/// Return a description of the specified action of the object.
			/// </summary>
			/// <param name="i"> zero-based index of the actions </param>
			public virtual String GetAccessibleActionDescription(int i)
			{
				if (i == 0)
				{
					// [[[PENDING:  WDW -- need to provide a localized string]]]
					return "click";
				}
				else
				{
					return null;
				}
			}

			/// <summary>
			/// Perform the specified Action on the object
			/// </summary>
			/// <param name="i"> zero-based index of actions </param>
			/// <returns> true if the the action was performed; else false. </returns>
			public virtual bool DoAccessibleAction(int i)
			{
				if (i == 0)
				{
					// Simulate a button click
					Toolkit.EventQueue.PostEvent(new ActionEvent(OuterInstance, ActionEvent.ACTION_PERFORMED, OuterInstance.ActionCommand));
					return true;
				}
				else
				{
					return false;
				}
			}

			/// <summary>
			/// Get the value of this object as a Number.
			/// </summary>
			/// <returns> An Integer of 0 if this isn't selected or an Integer of 1 if
			/// this is selected. </returns>
			/// <seealso cref= javax.swing.AbstractButton#isSelected() </seealso>
			public virtual Number CurrentAccessibleValue
			{
				get
				{
					return Convert.ToInt32(0);
				}
			}

			/// <summary>
			/// Set the value of this object as a Number.
			/// </summary>
			/// <returns> True if the value was set. </returns>
			public virtual bool SetCurrentAccessibleValue(Number n)
			{
				return false;
			}

			/// <summary>
			/// Get the minimum value of this object as a Number.
			/// </summary>
			/// <returns> An Integer of 0. </returns>
			public virtual Number MinimumAccessibleValue
			{
				get
				{
					return Convert.ToInt32(0);
				}
			}

			/// <summary>
			/// Get the maximum value of this object as a Number.
			/// </summary>
			/// <returns> An Integer of 0. </returns>
			public virtual Number MaximumAccessibleValue
			{
				get
				{
					return Convert.ToInt32(0);
				}
			}

			/// <summary>
			/// Get the role of this object.
			/// </summary>
			/// <returns> an instance of AccessibleRole describing the role of the
			/// object </returns>
			/// <seealso cref= AccessibleRole </seealso>
			public override AccessibleRole AccessibleRole
			{
				get
				{
					return AccessibleRole.PUSH_BUTTON;
				}
			}
		} // inner class AccessibleAWTButton

	}

}