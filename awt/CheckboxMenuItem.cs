using System;
using System.Runtime.InteropServices;

/*
 * Copyright (c) 1995, 2013, Oracle and/or its affiliates. All rights reserved.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */
namespace java.awt
{

	using AWTAccessor = sun.awt.AWTAccessor;


	/// <summary>
	/// This class represents a check box that can be included in a menu.
	/// Selecting the check box in the menu changes its state from
	/// "on" to "off" or from "off" to "on."
	/// <para>
	/// The following picture depicts a menu which contains an instance
	/// of <code>CheckBoxMenuItem</code>:
	/// </para>
	/// <para>
	/// <img src="doc-files/MenuBar-1.gif"
	/// alt="Menu labeled Examples, containing items Basic, Simple, Check, and More Examples. The Check item is a CheckBoxMenuItem instance, in the off state."
	/// style="float:center; margin: 7px 10px;">
	/// </para>
	/// <para>
	/// The item labeled <code>Check</code> shows a check box menu item
	/// in its "off" state.
	/// </para>
	/// <para>
	/// When a check box menu item is selected, AWT sends an item event to
	/// the item. Since the event is an instance of <code>ItemEvent</code>,
	/// the <code>processEvent</code> method examines the event and passes
	/// it along to <code>processItemEvent</code>. The latter method redirects
	/// the event to any <code>ItemListener</code> objects that have
	/// registered an interest in item events generated by this menu item.
	/// 
	/// @author      Sami Shaio
	/// </para>
	/// </summary>
	/// <seealso cref=         java.awt.event.ItemEvent </seealso>
	/// <seealso cref=         java.awt.event.ItemListener
	/// @since       JDK1.0 </seealso>
	public class CheckboxMenuItem : MenuItem, ItemSelectable, Accessible
	{

		static CheckboxMenuItem()
		{
			/* ensure that the necessary native libraries are loaded */
			Toolkit.LoadLibraries();
			if (!GraphicsEnvironment.Headless)
			{
				initIDs();
			}

			AWTAccessor.CheckboxMenuItemAccessor = new CheckboxMenuItemAccessorAnonymousInnerClassHelper();
		}

		private class CheckboxMenuItemAccessorAnonymousInnerClassHelper : AWTAccessor.CheckboxMenuItemAccessor
		{
			public CheckboxMenuItemAccessorAnonymousInnerClassHelper()
			{
			}

			public virtual bool GetState(CheckboxMenuItem cmi)
			{
				return cmi.State_Renamed;
			}
		}

	   /// <summary>
	   /// The state of a checkbox menu item
	   /// @serial </summary>
	   /// <seealso cref= #getState() </seealso>
	   /// <seealso cref= #setState(boolean) </seealso>
		internal bool State_Renamed = false;

		[NonSerialized]
		internal ItemListener ItemListener;

		private const String @base = "chkmenuitem";
		private static int NameCounter = 0;

		/*
		 * JDK 1.1 serialVersionUID
		 */
		 private const long SerialVersionUID = 6190621106981774043L;

		/// <summary>
		/// Create a check box menu item with an empty label.
		/// The item's state is initially set to "off." </summary>
		/// <exception cref="HeadlessException"> if GraphicsEnvironment.isHeadless()
		/// returns true </exception>
		/// <seealso cref= java.awt.GraphicsEnvironment#isHeadless
		/// @since   JDK1.1 </seealso>
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in .NET:
//ORIGINAL LINE: public CheckboxMenuItem() throws HeadlessException
		public CheckboxMenuItem() : this("", false)
		{
		}

		/// <summary>
		/// Create a check box menu item with the specified label.
		/// The item's state is initially set to "off."
		/// </summary>
		/// <param name="label">   a string label for the check box menu item,
		///                or <code>null</code> for an unlabeled menu item. </param>
		/// <exception cref="HeadlessException"> if GraphicsEnvironment.isHeadless()
		/// returns true </exception>
		/// <seealso cref= java.awt.GraphicsEnvironment#isHeadless </seealso>
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in .NET:
//ORIGINAL LINE: public CheckboxMenuItem(String label) throws HeadlessException
		public CheckboxMenuItem(String label) : this(label, false)
		{
		}

		/// <summary>
		/// Create a check box menu item with the specified label and state. </summary>
		/// <param name="label">   a string label for the check box menu item,
		///                     or <code>null</code> for an unlabeled menu item. </param>
		/// <param name="state">   the initial state of the menu item, where
		///                     <code>true</code> indicates "on" and
		///                     <code>false</code> indicates "off." </param>
		/// <exception cref="HeadlessException"> if GraphicsEnvironment.isHeadless()
		/// returns true </exception>
		/// <seealso cref= java.awt.GraphicsEnvironment#isHeadless
		/// @since      JDK1.1 </seealso>
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in .NET:
//ORIGINAL LINE: public CheckboxMenuItem(String label, boolean state) throws HeadlessException
		public CheckboxMenuItem(String label, bool state) : base(label)
		{
			this.State_Renamed = state;
		}

		/// <summary>
		/// Construct a name for this MenuComponent.  Called by getName() when
		/// the name is null.
		/// </summary>
		internal override String ConstructComponentName()
		{
			lock (typeof(CheckboxMenuItem))
			{
				return @base + NameCounter++;
			}
		}

		/// <summary>
		/// Creates the peer of the checkbox item.  This peer allows us to
		/// change the look of the checkbox item without changing its
		/// functionality.
		/// Most applications do not call this method directly. </summary>
		/// <seealso cref=     java.awt.Toolkit#createCheckboxMenuItem(java.awt.CheckboxMenuItem) </seealso>
		/// <seealso cref=     java.awt.Component#getToolkit() </seealso>
		public override void AddNotify()
		{
			lock (TreeLock)
			{
				if (Peer_Renamed == null)
				{
					Peer_Renamed = Toolkit.DefaultToolkit.CreateCheckboxMenuItem(this);
				}
				base.AddNotify();
			}
		}

		/// <summary>
		/// Determines whether the state of this check box menu item
		/// is "on" or "off."
		/// </summary>
		/// <returns>      the state of this check box menu item, where
		///                     <code>true</code> indicates "on" and
		///                     <code>false</code> indicates "off" </returns>
		/// <seealso cref=        #setState </seealso>
		public virtual bool State
		{
			get
			{
				return State_Renamed;
			}
			set
			{
				lock (this)
				{
					State_Renamed = value;
					CheckboxMenuItemPeer peer = (CheckboxMenuItemPeer)this.Peer_Renamed;
					if (peer != null)
					{
						peer.State = value;
					}
				}
			}
		}


		/// <summary>
		/// Returns the an array (length 1) containing the checkbox menu item
		/// label or null if the checkbox is not selected. </summary>
		/// <seealso cref= ItemSelectable </seealso>
		public virtual Object[] SelectedObjects
		{
			get
			{
				lock (this)
				{
					if (State_Renamed)
					{
						Object[] items = new Object[1];
						items[0] = Label_Renamed;
						return items;
					}
					return null;
				}
			}
		}

		/// <summary>
		/// Adds the specified item listener to receive item events from
		/// this check box menu item.  Item events are sent in response to user
		/// actions, but not in response to calls to setState().
		/// If l is null, no exception is thrown and no action is performed.
		/// <para>Refer to <a href="doc-files/AWTThreadIssues.html#ListenersThreads"
		/// >AWT Threading Issues</a> for details on AWT's threading model.
		/// 
		/// </para>
		/// </summary>
		/// <param name="l"> the item listener </param>
		/// <seealso cref=           #removeItemListener </seealso>
		/// <seealso cref=           #getItemListeners </seealso>
		/// <seealso cref=           #setState </seealso>
		/// <seealso cref=           java.awt.event.ItemEvent </seealso>
		/// <seealso cref=           java.awt.event.ItemListener
		/// @since         JDK1.1 </seealso>
		public virtual void AddItemListener(ItemListener l)
		{
			lock (this)
			{
				if (l == null)
				{
					return;
				}
				ItemListener = AWTEventMulticaster.Add(ItemListener, l);
				NewEventsOnly = true;
			}
		}

		/// <summary>
		/// Removes the specified item listener so that it no longer receives
		/// item events from this check box menu item.
		/// If l is null, no exception is thrown and no action is performed.
		/// <para>Refer to <a href="doc-files/AWTThreadIssues.html#ListenersThreads"
		/// >AWT Threading Issues</a> for details on AWT's threading model.
		/// 
		/// </para>
		/// </summary>
		/// <param name="l"> the item listener </param>
		/// <seealso cref=           #addItemListener </seealso>
		/// <seealso cref=           #getItemListeners </seealso>
		/// <seealso cref=           java.awt.event.ItemEvent </seealso>
		/// <seealso cref=           java.awt.event.ItemListener
		/// @since         JDK1.1 </seealso>
		public virtual void RemoveItemListener(ItemListener l)
		{
			lock (this)
			{
				if (l == null)
				{
					return;
				}
				ItemListener = AWTEventMulticaster.Remove(ItemListener, l);
			}
		}

		/// <summary>
		/// Returns an array of all the item listeners
		/// registered on this checkbox menuitem.
		/// </summary>
		/// <returns> all of this checkbox menuitem's <code>ItemListener</code>s
		///         or an empty array if no item
		///         listeners are currently registered
		/// </returns>
		/// <seealso cref=           #addItemListener </seealso>
		/// <seealso cref=           #removeItemListener </seealso>
		/// <seealso cref=           java.awt.event.ItemEvent </seealso>
		/// <seealso cref=           java.awt.event.ItemListener
		/// @since 1.4 </seealso>
		public virtual ItemListener[] ItemListeners
		{
			get
			{
				lock (this)
				{
					return GetListeners(typeof(ItemListener));
				}
			}
		}

		/// <summary>
		/// Returns an array of all the objects currently registered
		/// as <code><em>Foo</em>Listener</code>s
		/// upon this <code>CheckboxMenuItem</code>.
		/// <code><em>Foo</em>Listener</code>s are registered using the
		/// <code>add<em>Foo</em>Listener</code> method.
		/// 
		/// <para>
		/// You can specify the <code>listenerType</code> argument
		/// with a class literal, such as
		/// <code><em>Foo</em>Listener.class</code>.
		/// For example, you can query a
		/// <code>CheckboxMenuItem</code> <code>c</code>
		/// for its item listeners with the following code:
		/// 
		/// <pre>ItemListener[] ils = (ItemListener[])(c.getListeners(ItemListener.class));</pre>
		/// 
		/// If no such listeners exist, this method returns an empty array.
		/// 
		/// </para>
		/// </summary>
		/// <param name="listenerType"> the type of listeners requested; this parameter
		///          should specify an interface that descends from
		///          <code>java.util.EventListener</code> </param>
		/// <returns> an array of all objects registered as
		///          <code><em>Foo</em>Listener</code>s on this checkbox menuitem,
		///          or an empty array if no such
		///          listeners have been added </returns>
		/// <exception cref="ClassCastException"> if <code>listenerType</code>
		///          doesn't specify a class or interface that implements
		///          <code>java.util.EventListener</code>
		/// </exception>
		/// <seealso cref= #getItemListeners
		/// @since 1.3 </seealso>
		public override T[] getListeners<T>(Class listenerType) where T : java.util.EventListener
		{
			EventListener l = null;
			if (listenerType == typeof(ItemListener))
			{
				l = ItemListener;
			}
			else
			{
				return base.GetListeners(listenerType);
			}
			return AWTEventMulticaster.GetListeners(l, listenerType);
		}

		// REMIND: remove when filtering is done at lower level
		internal override bool EventEnabled(AWTEvent e)
		{
			if (e.Id == ItemEvent.ITEM_STATE_CHANGED)
			{
				if ((EventMask & AWTEvent.ITEM_EVENT_MASK) != 0 || ItemListener != null)
				{
					return true;
				}
				return false;
			}
			return base.EventEnabled(e);
		}

		/// <summary>
		/// Processes events on this check box menu item.
		/// If the event is an instance of <code>ItemEvent</code>,
		/// this method invokes the <code>processItemEvent</code> method.
		/// If the event is not an item event,
		/// it invokes <code>processEvent</code> on the superclass.
		/// <para>
		/// Check box menu items currently support only item events.
		/// </para>
		/// <para>Note that if the event parameter is <code>null</code>
		/// the behavior is unspecified and may result in an
		/// exception.
		/// 
		/// </para>
		/// </summary>
		/// <param name="e"> the event </param>
		/// <seealso cref=          java.awt.event.ItemEvent </seealso>
		/// <seealso cref=          #processItemEvent
		/// @since        JDK1.1 </seealso>
		protected internal override void ProcessEvent(AWTEvent e)
		{
			if (e is ItemEvent)
			{
				ProcessItemEvent((ItemEvent)e);
				return;
			}
			base.ProcessEvent(e);
		}

		/// <summary>
		/// Processes item events occurring on this check box menu item by
		/// dispatching them to any registered <code>ItemListener</code> objects.
		/// <para>
		/// This method is not called unless item events are
		/// enabled for this menu item. Item events are enabled
		/// when one of the following occurs:
		/// <ul>
		/// <li>An <code>ItemListener</code> object is registered
		/// via <code>addItemListener</code>.
		/// <li>Item events are enabled via <code>enableEvents</code>.
		/// </ul>
		/// </para>
		/// <para>Note that if the event parameter is <code>null</code>
		/// the behavior is unspecified and may result in an
		/// exception.
		/// 
		/// </para>
		/// </summary>
		/// <param name="e"> the item event </param>
		/// <seealso cref=         java.awt.event.ItemEvent </seealso>
		/// <seealso cref=         java.awt.event.ItemListener </seealso>
		/// <seealso cref=         #addItemListener </seealso>
		/// <seealso cref=         java.awt.MenuItem#enableEvents
		/// @since       JDK1.1 </seealso>
		protected internal virtual void ProcessItemEvent(ItemEvent e)
		{
			ItemListener listener = ItemListener;
			if (listener != null)
			{
				listener.ItemStateChanged(e);
			}
		}

		/*
		 * Post an ItemEvent and toggle state.
		 */
		internal override void DoMenuEvent(long when, int modifiers)
		{
			State = !State_Renamed;
			Toolkit.EventQueue.PostEvent(new ItemEvent(this, ItemEvent.ITEM_STATE_CHANGED, Label, State_Renamed ? ItemEvent.SELECTED : ItemEvent.DESELECTED));
		}

		/// <summary>
		/// Returns a string representing the state of this
		/// <code>CheckBoxMenuItem</code>. This
		/// method is intended to be used only for debugging purposes, and the
		/// content and format of the returned string may vary between
		/// implementations. The returned string may be empty but may not be
		/// <code>null</code>.
		/// </summary>
		/// <returns>     the parameter string of this check box menu item </returns>
		public override String ParamString()
		{
			return base.ParamString() + ",state=" + State_Renamed;
		}

		/* Serialization support.
		 */

		/*
		 * Serial Data Version
		 * @serial
		 */
		private int CheckboxMenuItemSerializedDataVersion = 1;

		/// <summary>
		/// Writes default serializable fields to stream.  Writes
		/// a list of serializable <code>ItemListeners</code>
		/// as optional data.  The non-serializable
		/// <code>ItemListeners</code> are detected and
		/// no attempt is made to serialize them.
		/// </summary>
		/// <param name="s"> the <code>ObjectOutputStream</code> to write
		/// @serialData <code>null</code> terminated sequence of
		///  0 or more pairs; the pair consists of a <code>String</code>
		///  and an <code>Object</code>; the <code>String</code> indicates
		///  the type of object and is one of the following:
		///  <code>itemListenerK</code> indicating an
		///    <code>ItemListener</code> object
		/// </param>
		/// <seealso cref= AWTEventMulticaster#save(ObjectOutputStream, String, EventListener) </seealso>
		/// <seealso cref= java.awt.Component#itemListenerK </seealso>
		/// <seealso cref= #readObject(ObjectInputStream) </seealso>
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in .NET:
//ORIGINAL LINE: private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException
		private void WriteObject(ObjectOutputStream s)
		{
		  s.DefaultWriteObject();

		  AWTEventMulticaster.Save(s, ItemListenerK, ItemListener);
		  s.WriteObject(null);
		}

		/*
		 * Reads the <code>ObjectInputStream</code> and if it
		 * isn't <code>null</code> adds a listener to receive
		 * item events fired by the <code>Checkbox</code> menu item.
		 * Unrecognized keys or values will be ignored.
		 *
		 * @param s the <code>ObjectInputStream</code> to read
		 * @serial
		 * @see removeActionListener()
		 * @see addActionListener()
		 * @see #writeObject
		 */
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in .NET:
//ORIGINAL LINE: private void readObject(java.io.ObjectInputStream s) throws ClassNotFoundException, java.io.IOException
		private void ReadObject(ObjectInputStream s)
		{
		  s.DefaultReadObject();

		  Object keyOrNull;
		  while (null != (keyOrNull = s.ReadObject()))
		  {
			String key = ((String)keyOrNull).intern();

			if (ItemListenerK == key)
			{
			  AddItemListener((ItemListener)(s.ReadObject()));
			}

			else // skip value for unrecognized key
			{
			  s.ReadObject();
			}
		  }
		}

		/// <summary>
		/// Initialize JNI field and method IDs
		/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Replace 'unknown' with the appropriate dll name:
		[DllImport("unknown")]
		private static extern void initIDs();


	/////////////////
	// Accessibility support
	////////////////

		/// <summary>
		/// Gets the AccessibleContext associated with this CheckboxMenuItem.
		/// For checkbox menu items, the AccessibleContext takes the
		/// form of an AccessibleAWTCheckboxMenuItem.
		/// A new AccessibleAWTCheckboxMenuItem is created if necessary.
		/// </summary>
		/// <returns> an AccessibleAWTCheckboxMenuItem that serves as the
		///         AccessibleContext of this CheckboxMenuItem
		/// @since 1.3 </returns>
		public override AccessibleContext AccessibleContext
		{
			get
			{
				if (AccessibleContext_Renamed == null)
				{
					AccessibleContext_Renamed = new AccessibleAWTCheckboxMenuItem(this);
				}
				return AccessibleContext_Renamed;
			}
		}

		/// <summary>
		/// Inner class of CheckboxMenuItem used to provide default support for
		/// accessibility.  This class is not meant to be used directly by
		/// application developers, but is instead meant only to be
		/// subclassed by menu component developers.
		/// <para>
		/// This class implements accessibility support for the
		/// <code>CheckboxMenuItem</code> class.  It provides an implementation
		/// of the Java Accessibility API appropriate to checkbox menu item
		/// user-interface elements.
		/// @since 1.3
		/// </para>
		/// </summary>
		protected internal class AccessibleAWTCheckboxMenuItem : AccessibleAWTMenuItem, AccessibleAction, AccessibleValue
		{
			private readonly CheckboxMenuItem OuterInstance;

			public AccessibleAWTCheckboxMenuItem(CheckboxMenuItem outerInstance) : base(outerInstance)
			{
				this.OuterInstance = outerInstance;
			}

			/*
			 * JDK 1.3 serialVersionUID
			 */
			internal const long SerialVersionUID = -1122642964303476L;

			/// <summary>
			/// Get the AccessibleAction associated with this object.  In the
			/// implementation of the Java Accessibility API for this class,
			/// return this object, which is responsible for implementing the
			/// AccessibleAction interface on behalf of itself.
			/// </summary>
			/// <returns> this object </returns>
			public override AccessibleAction AccessibleAction
			{
				get
				{
					return this;
				}
			}

			/// <summary>
			/// Get the AccessibleValue associated with this object.  In the
			/// implementation of the Java Accessibility API for this class,
			/// return this object, which is responsible for implementing the
			/// AccessibleValue interface on behalf of itself.
			/// </summary>
			/// <returns> this object </returns>
			public override AccessibleValue AccessibleValue
			{
				get
				{
					return this;
				}
			}

			/// <summary>
			/// Returns the number of Actions available in this object.
			/// If there is more than one, the first one is the "default"
			/// action.
			/// </summary>
			/// <returns> the number of Actions in this object </returns>
			public override int AccessibleActionCount
			{
				get
				{
					return 0; //  To be fully implemented in a future release
				}
			}

			/// <summary>
			/// Return a description of the specified action of the object.
			/// </summary>
			/// <param name="i"> zero-based index of the actions </param>
			public override String GetAccessibleActionDescription(int i)
			{
				return null; //  To be fully implemented in a future release
			}

			/// <summary>
			/// Perform the specified Action on the object
			/// </summary>
			/// <param name="i"> zero-based index of actions </param>
			/// <returns> true if the action was performed; otherwise false. </returns>
			public override bool DoAccessibleAction(int i)
			{
				return false; //  To be fully implemented in a future release
			}

			/// <summary>
			/// Get the value of this object as a Number.  If the value has not been
			/// set, the return value will be null.
			/// </summary>
			/// <returns> value of the object </returns>
			/// <seealso cref= #setCurrentAccessibleValue </seealso>
			public override Number CurrentAccessibleValue
			{
				get
				{
					return null; //  To be fully implemented in a future release
				}
			}

			/// <summary>
			/// Set the value of this object as a Number.
			/// </summary>
			/// <returns> true if the value was set; otherwise false </returns>
			/// <seealso cref= #getCurrentAccessibleValue </seealso>
			public override bool SetCurrentAccessibleValue(Number n)
			{
				return false; //  To be fully implemented in a future release
			}

			/// <summary>
			/// Get the minimum value of this object as a Number.
			/// </summary>
			/// <returns> Minimum value of the object; null if this object does not
			/// have a minimum value </returns>
			/// <seealso cref= #getMaximumAccessibleValue </seealso>
			public override Number MinimumAccessibleValue
			{
				get
				{
					return null; //  To be fully implemented in a future release
				}
			}

			/// <summary>
			/// Get the maximum value of this object as a Number.
			/// </summary>
			/// <returns> Maximum value of the object; null if this object does not
			/// have a maximum value </returns>
			/// <seealso cref= #getMinimumAccessibleValue </seealso>
			public override Number MaximumAccessibleValue
			{
				get
				{
					return null; //  To be fully implemented in a future release
				}
			}

			/// <summary>
			/// Get the role of this object.
			/// </summary>
			/// <returns> an instance of AccessibleRole describing the role of the
			/// object </returns>
			public override AccessibleRole AccessibleRole
			{
				get
				{
					return AccessibleRole.CHECK_BOX;
				}
			}

		} // class AccessibleAWTMenuItem

	}

}