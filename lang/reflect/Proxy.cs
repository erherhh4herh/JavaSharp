using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

/*
 * Copyright (c) 1999, 2013, Oracle and/or its affiliates. All rights reserved.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */

namespace java.lang.reflect
{

	using ProxyGenerator = sun.misc.ProxyGenerator;
	using VM = sun.misc.VM;
	using CallerSensitive = sun.reflect.CallerSensitive;
	using Reflection = sun.reflect.Reflection;
	using ReflectUtil = sun.reflect.misc.ReflectUtil;
	using SecurityConstants = sun.security.util.SecurityConstants;

	/// <summary>
	/// {@code Proxy} provides static methods for creating dynamic proxy
	/// classes and instances, and it is also the superclass of all
	/// dynamic proxy classes created by those methods.
	/// 
	/// <para>To create a proxy for some interface {@code Foo}:
	/// <pre>
	///     InvocationHandler handler = new MyInvocationHandler(...);
	///     Class&lt;?&gt; proxyClass = Proxy.getProxyClass(Foo.class.getClassLoader(), Foo.class);
	///     Foo f = (Foo) proxyClass.getConstructor(InvocationHandler.class).
	///                     newInstance(handler);
	/// </pre>
	/// or more simply:
	/// <pre>
	///     Foo f = (Foo) Proxy.newProxyInstance(Foo.class.getClassLoader(),
	///                                          new Class&lt;?&gt;[] { Foo.class },
	///                                          handler);
	/// </pre>
	/// 
	/// </para>
	/// <para>A <i>dynamic proxy class</i> (simply referred to as a <i>proxy
	/// class</i> below) is a class that implements a list of interfaces
	/// specified at runtime when the class is created, with behavior as
	/// described below.
	/// 
	/// A <i>proxy interface</i> is such an interface that is implemented
	/// by a proxy class.
	/// 
	/// A <i>proxy instance</i> is an instance of a proxy class.
	/// 
	/// Each proxy instance has an associated <i>invocation handler</i>
	/// object, which implements the interface <seealso cref="InvocationHandler"/>.
	/// A method invocation on a proxy instance through one of its proxy
	/// interfaces will be dispatched to the {@link InvocationHandler#invoke
	/// invoke} method of the instance's invocation handler, passing the proxy
	/// instance, a {@code java.lang.reflect.Method} object identifying
	/// the method that was invoked, and an array of type {@code Object}
	/// containing the arguments.  The invocation handler processes the
	/// encoded method invocation as appropriate and the result that it
	/// returns will be returned as the result of the method invocation on
	/// the proxy instance.
	/// 
	/// </para>
	/// <para>A proxy class has the following properties:
	/// 
	/// <ul>
	/// <li>Proxy classes are <em>public, final, and not abstract</em> if
	/// all proxy interfaces are public.</li>
	/// 
	/// <li>Proxy classes are <em>non-public, final, and not abstract</em> if
	/// any of the proxy interfaces is non-public.</li>
	/// 
	/// <li>The unqualified name of a proxy class is unspecified.  The space
	/// of class names that begin with the string {@code "$Proxy"}
	/// should be, however, reserved for proxy classes.
	/// 
	/// <li>A proxy class extends {@code java.lang.reflect.Proxy}.
	/// 
	/// <li>A proxy class implements exactly the interfaces specified at its
	/// creation, in the same order.
	/// 
	/// <li>If a proxy class implements a non-public interface, then it will
	/// be defined in the same package as that interface.  Otherwise, the
	/// package of a proxy class is also unspecified.  Note that package
	/// sealing will not prevent a proxy class from being successfully defined
	/// in a particular package at runtime, and neither will classes already
	/// defined by the same class loader and the same package with particular
	/// signers.
	/// 
	/// <li>Since a proxy class implements all of the interfaces specified at
	/// its creation, invoking {@code getInterfaces} on its
	/// {@code Class} object will return an array containing the same
	/// list of interfaces (in the order specified at its creation), invoking
	/// {@code getMethods} on its {@code Class} object will return
	/// an array of {@code Method} objects that include all of the
	/// methods in those interfaces, and invoking {@code getMethod} will
	/// find methods in the proxy interfaces as would be expected.
	/// 
	/// <li>The <seealso cref="Proxy#isProxyClass Proxy.isProxyClass"/> method will
	/// return true if it is passed a proxy class-- a class returned by
	/// {@code Proxy.getProxyClass} or the class of an object returned by
	/// {@code Proxy.newProxyInstance}-- and false otherwise.
	/// 
	/// <li>The {@code java.security.ProtectionDomain} of a proxy class
	/// is the same as that of system classes loaded by the bootstrap class
	/// loader, such as {@code java.lang.Object}, because the code for a
	/// proxy class is generated by trusted system code.  This protection
	/// domain will typically be granted
	/// {@code java.security.AllPermission}.
	/// 
	/// <li>Each proxy class has one public constructor that takes one argument,
	/// an implementation of the interface <seealso cref="InvocationHandler"/>, to set
	/// the invocation handler for a proxy instance.  Rather than having to use
	/// the reflection API to access the public constructor, a proxy instance
	/// can be also be created by calling the {@link Proxy#newProxyInstance
	/// Proxy.newProxyInstance} method, which combines the actions of calling
	/// <seealso cref="Proxy#getProxyClass Proxy.getProxyClass"/> with invoking the
	/// constructor with an invocation handler.
	/// </ul>
	/// 
	/// </para>
	/// <para>A proxy instance has the following properties:
	/// 
	/// <ul>
	/// <li>Given a proxy instance {@code proxy} and one of the
	/// interfaces implemented by its proxy class {@code Foo}, the
	/// following expression will return true:
	/// <pre>
	///     {@code proxy instanceof Foo}
	/// </pre>
	/// and the following cast operation will succeed (rather than throwing
	/// a {@code ClassCastException}):
	/// <pre>
	///     {@code (Foo) proxy}
	/// </pre>
	/// 
	/// <li>Each proxy instance has an associated invocation handler, the one
	/// that was passed to its constructor.  The static
	/// <seealso cref="Proxy#getInvocationHandler Proxy.getInvocationHandler"/> method
	/// will return the invocation handler associated with the proxy instance
	/// passed as its argument.
	/// 
	/// <li>An interface method invocation on a proxy instance will be
	/// encoded and dispatched to the invocation handler's {@link
	/// InvocationHandler#invoke invoke} method as described in the
	/// documentation for that method.
	/// 
	/// <li>An invocation of the {@code hashCode},
	/// {@code equals}, or {@code toString} methods declared in
	/// {@code java.lang.Object} on a proxy instance will be encoded and
	/// dispatched to the invocation handler's {@code invoke} method in
	/// the same manner as interface method invocations are encoded and
	/// dispatched, as described above.  The declaring class of the
	/// {@code Method} object passed to {@code invoke} will be
	/// {@code java.lang.Object}.  Other public methods of a proxy
	/// instance inherited from {@code java.lang.Object} are not
	/// overridden by a proxy class, so invocations of those methods behave
	/// like they do for instances of {@code java.lang.Object}.
	/// </ul>
	/// 
	/// <h3>Methods Duplicated in Multiple Proxy Interfaces</h3>
	/// 
	/// </para>
	/// <para>When two or more interfaces of a proxy class contain a method with
	/// the same name and parameter signature, the order of the proxy class's
	/// interfaces becomes significant.  When such a <i>duplicate method</i>
	/// is invoked on a proxy instance, the {@code Method} object passed
	/// to the invocation handler will not necessarily be the one whose
	/// declaring class is assignable from the reference type of the interface
	/// that the proxy's method was invoked through.  This limitation exists
	/// because the corresponding method implementation in the generated proxy
	/// class cannot determine which interface it was invoked through.
	/// Therefore, when a duplicate method is invoked on a proxy instance,
	/// the {@code Method} object for the method in the foremost interface
	/// that contains the method (either directly or inherited through a
	/// superinterface) in the proxy class's list of interfaces is passed to
	/// the invocation handler's {@code invoke} method, regardless of the
	/// reference type through which the method invocation occurred.
	/// 
	/// </para>
	/// <para>If a proxy interface contains a method with the same name and
	/// parameter signature as the {@code hashCode}, {@code equals},
	/// or {@code toString} methods of {@code java.lang.Object},
	/// when such a method is invoked on a proxy instance, the
	/// {@code Method} object passed to the invocation handler will have
	/// {@code java.lang.Object} as its declaring class.  In other words,
	/// the public, non-final methods of {@code java.lang.Object}
	/// logically precede all of the proxy interfaces for the determination of
	/// which {@code Method} object to pass to the invocation handler.
	/// 
	/// </para>
	/// <para>Note also that when a duplicate method is dispatched to an
	/// invocation handler, the {@code invoke} method may only throw
	/// checked exception types that are assignable to one of the exception
	/// types in the {@code throws} clause of the method in <i>all</i> of
	/// the proxy interfaces that it can be invoked through.  If the
	/// {@code invoke} method throws a checked exception that is not
	/// assignable to any of the exception types declared by the method in one
	/// of the proxy interfaces that it can be invoked through, then an
	/// unchecked {@code UndeclaredThrowableException} will be thrown by
	/// the invocation on the proxy instance.  This restriction means that not
	/// all of the exception types returned by invoking
	/// {@code getExceptionTypes} on the {@code Method} object
	/// passed to the {@code invoke} method can necessarily be thrown
	/// successfully by the {@code invoke} method.
	/// 
	/// @author      Peter Jones
	/// </para>
	/// </summary>
	/// <seealso cref=         InvocationHandler
	/// @since       1.3 </seealso>
	[Serializable]
	public class Proxy
	{

		private const long SerialVersionUID = -2222568056686623797L;

		/// <summary>
		/// parameter types of a proxy class constructor </summary>
		private static readonly Class[] ConstructorParams = new Class[] {typeof(InvocationHandler)};

		/// <summary>
		/// a cache of proxy classes
		/// </summary>
		private static readonly WeakCache<ClassLoader, Class[], Class> ProxyClassCache = new WeakCache<ClassLoader, Class[], Class>(new KeyFactory(), new ProxyClassFactory());

		/// <summary>
		/// the invocation handler for this proxy instance.
		/// @serial
		/// </summary>
		protected internal InvocationHandler h;

		/// <summary>
		/// Prohibits instantiation.
		/// </summary>
		private Proxy()
		{
		}

		/// <summary>
		/// Constructs a new {@code Proxy} instance from a subclass
		/// (typically, a dynamic proxy class) with the specified value
		/// for its invocation handler.
		/// </summary>
		/// <param name="h"> the invocation handler for this proxy instance
		/// </param>
		/// <exception cref="NullPointerException"> if the given invocation handler, {@code h},
		///         is {@code null}. </exception>
		protected internal Proxy(InvocationHandler h)
		{
			Objects.RequireNonNull(h);
			this.h = h;
		}

		/// <summary>
		/// Returns the {@code java.lang.Class} object for a proxy class
		/// given a class loader and an array of interfaces.  The proxy class
		/// will be defined by the specified class loader and will implement
		/// all of the supplied interfaces.  If any of the given interfaces
		/// is non-public, the proxy class will be non-public. If a proxy class
		/// for the same permutation of interfaces has already been defined by the
		/// class loader, then the existing proxy class will be returned; otherwise,
		/// a proxy class for those interfaces will be generated dynamically
		/// and defined by the class loader.
		/// 
		/// <para>There are several restrictions on the parameters that may be
		/// passed to {@code Proxy.getProxyClass}:
		/// 
		/// <ul>
		/// <li>All of the {@code Class} objects in the
		/// {@code interfaces} array must represent interfaces, not
		/// classes or primitive types.
		/// 
		/// <li>No two elements in the {@code interfaces} array may
		/// refer to identical {@code Class} objects.
		/// 
		/// <li>All of the interface types must be visible by name through the
		/// specified class loader.  In other words, for class loader
		/// {@code cl} and every interface {@code i}, the following
		/// expression must be true:
		/// <pre>
		///     Class.forName(i.getName(), false, cl) == i
		/// </pre>
		/// 
		/// <li>All non-public interfaces must be in the same package;
		/// otherwise, it would not be possible for the proxy class to
		/// implement all of the interfaces, regardless of what package it is
		/// defined in.
		/// 
		/// <li>For any set of member methods of the specified interfaces
		/// that have the same signature:
		/// <ul>
		/// <li>If the return type of any of the methods is a primitive
		/// type or void, then all of the methods must have that same
		/// return type.
		/// <li>Otherwise, one of the methods must have a return type that
		/// is assignable to all of the return types of the rest of the
		/// methods.
		/// </ul>
		/// 
		/// <li>The resulting proxy class must not exceed any limits imposed
		/// on classes by the virtual machine.  For example, the VM may limit
		/// the number of interfaces that a class may implement to 65535; in
		/// that case, the size of the {@code interfaces} array must not
		/// exceed 65535.
		/// </ul>
		/// 
		/// </para>
		/// <para>If any of these restrictions are violated,
		/// {@code Proxy.getProxyClass} will throw an
		/// {@code IllegalArgumentException}.  If the {@code interfaces}
		/// array argument or any of its elements are {@code null}, a
		/// {@code NullPointerException} will be thrown.
		/// 
		/// </para>
		/// <para>Note that the order of the specified proxy interfaces is
		/// significant: two requests for a proxy class with the same combination
		/// of interfaces but in a different order will result in two distinct
		/// proxy classes.
		/// 
		/// </para>
		/// </summary>
		/// <param name="loader"> the class loader to define the proxy class </param>
		/// <param name="interfaces"> the list of interfaces for the proxy class
		///          to implement </param>
		/// <returns>  a proxy class that is defined in the specified class loader
		///          and that implements the specified interfaces </returns>
		/// <exception cref="IllegalArgumentException"> if any of the restrictions on the
		///          parameters that may be passed to {@code getProxyClass}
		///          are violated </exception>
		/// <exception cref="SecurityException"> if a security manager, <em>s</em>, is present
		///          and any of the following conditions is met:
		///          <ul>
		///             <li> the given {@code loader} is {@code null} and
		///             the caller's class loader is not {@code null} and the
		///             invocation of {@link SecurityManager#checkPermission
		///             s.checkPermission} with
		///             {@code RuntimePermission("getClassLoader")} permission
		///             denies access.</li>
		///             <li> for each proxy interface, {@code intf},
		///             the caller's class loader is not the same as or an
		///             ancestor of the class loader for {@code intf} and
		///             invocation of {@link SecurityManager#checkPackageAccess
		///             s.checkPackageAccess()} denies access to {@code intf}.</li>
		///          </ul>
		/// </exception>
		/// <exception cref="NullPointerException"> if the {@code interfaces} array
		///          argument or any of its elements are {@code null} </exception>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @CallerSensitive public static Class getProxyClass(ClassLoader loader, Class... interfaces) throws IllegalArgumentException
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in .NET:
		public static Class GetProxyClass(ClassLoader loader, params Class[] interfaces)
		{
//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':
//ORIGINAL LINE: final Class[] intfs = interfaces.clone();
			Class[] intfs = interfaces.clone();
//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':
//ORIGINAL LINE: final SecurityManager sm = System.getSecurityManager();
			SecurityManager sm = System.SecurityManager;
			if (sm != null)
			{
				CheckProxyAccess(Reflection.CallerClass, loader, intfs);
			}

			return GetProxyClass0(loader, intfs);
		}

		/*
		 * Check permissions required to create a Proxy class.
		 *
		 * To define a proxy class, it performs the access checks as in
		 * Class.forName (VM will invoke ClassLoader.checkPackageAccess):
		 * 1. "getClassLoader" permission check if loader == null
		 * 2. checkPackageAccess on the interfaces it implements
		 *
		 * To get a constructor and new instance of a proxy class, it performs
		 * the package access check on the interfaces it implements
		 * as in Class.getConstructor.
		 *
		 * If an interface is non-public, the proxy class must be defined by
		 * the defining loader of the interface.  If the caller's class loader
		 * is not the same as the defining loader of the interface, the VM
		 * will throw IllegalAccessError when the generated proxy class is
		 * being defined via the defineClass0 method.
		 */
		private static void CheckProxyAccess(Class caller, ClassLoader loader, params Class[] interfaces)
		{
			SecurityManager sm = System.SecurityManager;
			if (sm != null)
			{
				ClassLoader ccl = caller.ClassLoader;
				if (VM.isSystemDomainLoader(loader) && !VM.isSystemDomainLoader(ccl))
				{
					sm.CheckPermission(SecurityConstants.GET_CLASSLOADER_PERMISSION);
				}
				ReflectUtil.checkProxyPackageAccess(ccl, interfaces);
			}
		}

		/// <summary>
		/// Generate a proxy class.  Must call the checkProxyAccess method
		/// to perform permission checks before calling this.
		/// </summary>
		private static Class GetProxyClass0(ClassLoader loader, params Class[] interfaces)
		{
			if (interfaces.Length > 65535)
			{
				throw new IllegalArgumentException("interface limit exceeded");
			}

			// If the proxy class defined by the given loader implementing
			// the given interfaces exists, this will simply return the cached copy;
			// otherwise, it will create the proxy class via the ProxyClassFactory
			return ProxyClassCache.Get(loader, interfaces);
		}

		/*
		 * a key used for proxy class with 0 implemented interfaces
		 */
		private static readonly Object Key0 = new Object();

		/*
		 * Key1 and Key2 are optimized for the common use of dynamic proxies
		 * that implement 1 or 2 interfaces.
		 */

		/*
		 * a key used for proxy class with 1 implemented interface
		 */
		private sealed class Key1 : WeakReference<Class>
		{
			internal readonly int Hash;

			internal Key1(Class intf) : base(intf)
			{
				this.Hash = intf.HashCode();
			}

			public override int HashCode()
			{
				return Hash;
			}

			public override bool Equals(Object obj)
			{
				Class intf;
				return this == obj || obj != null && obj.GetType() == typeof(Key1) && (intf = get()) != null && intf == ((Key1) obj).get();
			}
		}

		/*
		 * a key used for proxy class with 2 implemented interfaces
		 */
		private sealed class Key2 : WeakReference<Class>
		{
			internal readonly int Hash;
			internal readonly WeakReference<Class> Ref2;

			internal Key2(Class intf1, Class intf2) : base(intf1)
			{
				Hash = 31 * intf1.HashCode() + intf2.HashCode();
				Ref2 = new WeakReference<Class>(intf2);
			}

			public override int HashCode()
			{
				return Hash;
			}

			public override bool Equals(Object obj)
			{
				Class intf1, intf2;
				return this == obj || obj != null && obj.GetType() == typeof(Key2) && (intf1 = get()) != null && intf1 == ((Key2) obj).get() && (intf2 = Ref2.get()) != null && intf2 == ((Key2) obj).Ref2.get();
			}
		}

		/*
		 * a key used for proxy class with any number of implemented interfaces
		 * (used here for 3 or more only)
		 */
		private sealed class KeyX
		{
			internal readonly int Hash;
			internal readonly WeakReference<Class>[] Refs;

//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @SuppressWarnings("unchecked") KeyX(Class[] interfaces)
			internal KeyX(Class[] interfaces)
			{
				Hash = Arrays.HashCode(interfaces);
//JAVA TO C# CONVERTER TODO TASK: Java wildcard generics are not converted to .NET:
//ORIGINAL LINE: refs = (WeakReference<Class>[])new WeakReference<?>[interfaces.length];
				Refs = (WeakReference<Class>[])new WeakReference<?>[interfaces.Length];
				for (int i = 0; i < interfaces.Length; i++)
				{
					Refs[i] = new WeakReference<>(interfaces[i]);
				}
			}

			public override int HashCode()
			{
				return Hash;
			}

			public override bool Equals(Object obj)
			{
				return this == obj || obj != null && obj.GetType() == typeof(KeyX) && Equals(Refs, ((KeyX) obj).Refs);
			}

			internal static bool Equals(WeakReference<Class>[] refs1, WeakReference<Class>[] refs2)
			{
				if (refs1.Length != refs2.Length)
				{
					return false;
				}
				for (int i = 0; i < refs1.Length; i++)
				{
					Class intf = refs1[i].get();
					if (intf == null || intf != refs2[i].get())
					{
						return false;
					}
				}
				return true;
			}
		}

		/// <summary>
		/// A function that maps an array of interfaces to an optimal key where
		/// Class objects representing interfaces are weakly referenced.
		/// </summary>
		private sealed class KeyFactory : BiFunction<ClassLoader, Class[], Object>
		{
			public override Object Apply(ClassLoader classLoader, Class[] interfaces)
			{
				switch (interfaces.Length)
				{
					case 1: // the most frequent
						return new Key1(interfaces[0]);
					case 2:
						return new Key2(interfaces[0], interfaces[1]);
					case 0:
						return Key0;
					default:
						return new KeyX(interfaces);
				}
			}
		}

		/// <summary>
		/// A factory function that generates, defines and returns the proxy class given
		/// the ClassLoader and array of interfaces.
		/// </summary>
		private sealed class ProxyClassFactory : BiFunction<ClassLoader, Class[], Class>
		{
			// prefix for all proxy class names
			internal const String ProxyClassNamePrefix = "$Proxy";

			// next number to use for generation of unique proxy class names
			internal static readonly AtomicLong NextUniqueNumber = new AtomicLong();

			public override Class Apply(ClassLoader loader, Class[] interfaces)
			{

				IDictionary<Class, Boolean> interfaceSet = new IdentityHashMap<Class, Boolean>(interfaces.Length);
				foreach (Class intf in interfaces)
				{
					/*
					 * Verify that the class loader resolves the name of this
					 * interface to the same Class object.
					 */
					Class interfaceClass = null;
					try
					{
						interfaceClass = Class.ForName(intf.Name, false, loader);
					}
					catch (ClassNotFoundException)
					{
					}
					if (interfaceClass != intf)
					{
						throw new IllegalArgumentException(intf + " is not visible from class loader");
					}
					/*
					 * Verify that the Class object actually represents an
					 * interface.
					 */
					if (!interfaceClass.Interface)
					{
						throw new IllegalArgumentException(interfaceClass.Name + " is not an interface");
					}
					/*
					 * Verify that this interface is not a duplicate.
					 */
					if (interfaceSet.put(interfaceClass, true) != null)
					{
						throw new IllegalArgumentException("repeated interface: " + interfaceClass.Name);
					}
				}

				String proxyPkg = null; // package to define proxy class in
				int accessFlags = Modifier.PUBLIC | Modifier.FINAL;

				/*
				 * Record the package of a non-public proxy interface so that the
				 * proxy class will be defined in the same package.  Verify that
				 * all non-public proxy interfaces are in the same package.
				 */
				foreach (Class intf in interfaces)
				{
					int flags = intf.Modifiers;
					if (!Modifier.IsPublic(flags))
					{
						accessFlags = Modifier.FINAL;
						String name = intf.Name;
						int n = name.LastIndexOf('.');
						String pkg = ((n == -1) ? "" : name.Substring(0, n + 1));
						if (proxyPkg == null)
						{
							proxyPkg = pkg;
						}
						else if (!pkg.Equals(proxyPkg))
						{
							throw new IllegalArgumentException("non-public interfaces from different packages");
						}
					}
				}

				if (proxyPkg == null)
				{
					// if no non-public proxy interfaces, use com.sun.proxy package
					proxyPkg = ReflectUtil.PROXY_PACKAGE + ".";
				}

				/*
				 * Choose a name for the proxy class to generate.
				 */
				long num = NextUniqueNumber.AndIncrement;
				String proxyName = proxyPkg + ProxyClassNamePrefix + num;

				/*
				 * Generate the specified proxy class.
				 */
				sbyte[] proxyClassFile = ProxyGenerator.generateProxyClass(proxyName, interfaces, accessFlags);
				try
				{
					return defineClass0(loader, proxyName, proxyClassFile, 0, proxyClassFile.Length);
				}
				catch (ClassFormatError e)
				{
					/*
					 * A ClassFormatError here means that (barring bugs in the
					 * proxy class generation code) there was some other
					 * invalid aspect of the arguments supplied to the proxy
					 * class creation (such as virtual machine limitations
					 * exceeded).
					 */
					throw new IllegalArgumentException(e.ToString());
				}
			}
		}

		/// <summary>
		/// Returns an instance of a proxy class for the specified interfaces
		/// that dispatches method invocations to the specified invocation
		/// handler.
		/// 
		/// <para>{@code Proxy.newProxyInstance} throws
		/// {@code IllegalArgumentException} for the same reasons that
		/// {@code Proxy.getProxyClass} does.
		/// 
		/// </para>
		/// </summary>
		/// <param name="loader"> the class loader to define the proxy class </param>
		/// <param name="interfaces"> the list of interfaces for the proxy class
		///          to implement </param>
		/// <param name="h"> the invocation handler to dispatch method invocations to </param>
		/// <returns>  a proxy instance with the specified invocation handler of a
		///          proxy class that is defined by the specified class loader
		///          and that implements the specified interfaces </returns>
		/// <exception cref="IllegalArgumentException"> if any of the restrictions on the
		///          parameters that may be passed to {@code getProxyClass}
		///          are violated </exception>
		/// <exception cref="SecurityException"> if a security manager, <em>s</em>, is present
		///          and any of the following conditions is met:
		///          <ul>
		///          <li> the given {@code loader} is {@code null} and
		///               the caller's class loader is not {@code null} and the
		///               invocation of {@link SecurityManager#checkPermission
		///               s.checkPermission} with
		///               {@code RuntimePermission("getClassLoader")} permission
		///               denies access;</li>
		///          <li> for each proxy interface, {@code intf},
		///               the caller's class loader is not the same as or an
		///               ancestor of the class loader for {@code intf} and
		///               invocation of {@link SecurityManager#checkPackageAccess
		///               s.checkPackageAccess()} denies access to {@code intf};</li>
		///          <li> any of the given proxy interfaces is non-public and the
		///               caller class is not in the same <seealso cref="Package runtime package"/>
		///               as the non-public interface and the invocation of
		///               <seealso cref="SecurityManager#checkPermission s.checkPermission"/> with
		///               {@code ReflectPermission("newProxyInPackage.{package name}")}
		///               permission denies access.</li>
		///          </ul> </exception>
		/// <exception cref="NullPointerException"> if the {@code interfaces} array
		///          argument or any of its elements are {@code null}, or
		///          if the invocation handler, {@code h}, is
		///          {@code null} </exception>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @CallerSensitive public static Object newProxyInstance(ClassLoader loader, Class[] interfaces, InvocationHandler h) throws IllegalArgumentException
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in .NET:
		public static Object NewProxyInstance(ClassLoader loader, Class[] interfaces, InvocationHandler h)
		{
			Objects.RequireNonNull(h);

//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':
//ORIGINAL LINE: final Class[] intfs = interfaces.clone();
			Class[] intfs = interfaces.clone();
//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':
//ORIGINAL LINE: final SecurityManager sm = System.getSecurityManager();
			SecurityManager sm = System.SecurityManager;
			if (sm != null)
			{
				CheckProxyAccess(Reflection.CallerClass, loader, intfs);
			}

			/*
			 * Look up or generate the designated proxy class.
			 */
			Class cl = GetProxyClass0(loader, intfs);

			/*
			 * Invoke its constructor with the designated invocation handler.
			 */
			try
			{
				if (sm != null)
				{
					CheckNewProxyPermission(Reflection.CallerClass, cl);
				}

//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':
//ORIGINAL LINE: final Constructor<?> cons = cl.getConstructor(constructorParams);
//JAVA TO C# CONVERTER TODO TASK: Java wildcard generics are not converted to .NET:
				Constructor<?> cons = cl.GetConstructor(ConstructorParams);
//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':
//ORIGINAL LINE: final InvocationHandler ih = h;
				InvocationHandler ih = h;
				if (!Modifier.IsPublic(cl.Modifiers))
				{
					AccessController.doPrivileged(new PrivilegedActionAnonymousInnerClassHelper(cons));
				}
				return cons.NewInstance(new Object[]{h});
			}
//JAVA TO C# CONVERTER TODO TASK: There is no equivalent in C# to Java 'multi-catch' syntax:
			catch (IllegalAccessException | InstantiationException e)
			{
				throw new InternalError(e.ToString(), e);
			}
			catch (InvocationTargetException e)
			{
				Throwable t = e.InnerException;
				if (t is RuntimeException)
				{
					throw (RuntimeException) t;
				}
				else
				{
					throw new InternalError(t.ToString(), t);
				}
			}
			catch (NoSuchMethodException e)
			{
				throw new InternalError(e.ToString(), e);
			}
		}

		private class PrivilegedActionAnonymousInnerClassHelper : PrivilegedAction<Void>
		{
//JAVA TO C# CONVERTER TODO TASK: Java wildcard generics are not converted to .NET:
//ORIGINAL LINE: private java.lang.reflect.Constructor<JavaToDotNetGenericWildcard> cons;
			private System.Reflection.ConstructorInfo<?> Cons;

			public PrivilegedActionAnonymousInnerClassHelper<T1>(System.Reflection.ConstructorInfo<T1> cons)
			{
				this.Cons = cons;
			}

			public virtual Void Run()
			{
				Cons.Accessible = true;
				return null;
			}
		}

		private static void CheckNewProxyPermission(Class caller, Class proxyClass)
		{
			SecurityManager sm = System.SecurityManager;
			if (sm != null)
			{
				if (ReflectUtil.isNonPublicProxyClass(proxyClass))
				{
					ClassLoader ccl = caller.ClassLoader;
					ClassLoader pcl = proxyClass.ClassLoader;

					// do permission check if the caller is in a different runtime package
					// of the proxy class
					int n = proxyClass.Name.LastIndexOf('.');
					String pkg = (n == -1) ? "" : proxyClass.Name.Substring(0, n);

					n = caller.Name.LastIndexOf('.');
					String callerPkg = (n == -1) ? "" : caller.Name.Substring(0, n);

					if (pcl != ccl || !pkg.Equals(callerPkg))
					{
						sm.CheckPermission(new ReflectPermission("newProxyInPackage." + pkg));
					}
				}
			}
		}

		/// <summary>
		/// Returns true if and only if the specified class was dynamically
		/// generated to be a proxy class using the {@code getProxyClass}
		/// method or the {@code newProxyInstance} method.
		/// 
		/// <para>The reliability of this method is important for the ability
		/// to use it to make security decisions, so its implementation should
		/// not just test if the class in question extends {@code Proxy}.
		/// 
		/// </para>
		/// </summary>
		/// <param name="cl"> the class to test </param>
		/// <returns>  {@code true} if the class is a proxy class and
		///          {@code false} otherwise </returns>
		/// <exception cref="NullPointerException"> if {@code cl} is {@code null} </exception>
		public static bool IsProxyClass(Class cl)
		{
			return cl.IsSubclassOf(typeof(Proxy)) && ProxyClassCache.ContainsValue(cl);
		}

		/// <summary>
		/// Returns the invocation handler for the specified proxy instance.
		/// </summary>
		/// <param name="proxy"> the proxy instance to return the invocation handler for </param>
		/// <returns>  the invocation handler for the proxy instance </returns>
		/// <exception cref="IllegalArgumentException"> if the argument is not a
		///          proxy instance </exception>
		/// <exception cref="SecurityException"> if a security manager, <em>s</em>, is present
		///          and the caller's class loader is not the same as or an
		///          ancestor of the class loader for the invocation handler
		///          and invocation of {@link SecurityManager#checkPackageAccess
		///          s.checkPackageAccess()} denies access to the invocation
		///          handler's class. </exception>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @CallerSensitive public static InvocationHandler getInvocationHandler(Object proxy) throws IllegalArgumentException
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in .NET:
		public static InvocationHandler GetInvocationHandler(Object proxy)
		{
			/*
			 * Verify that the object is actually a proxy instance.
			 */
			if (!IsProxyClass(proxy.GetType()))
			{
				throw new IllegalArgumentException("not a proxy instance");
			}

//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':
//ORIGINAL LINE: final Proxy p = (Proxy) proxy;
			Proxy p = (Proxy) proxy;
//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':
//ORIGINAL LINE: final InvocationHandler ih = p.h;
			InvocationHandler ih = p.h;
			if (System.SecurityManager != null)
			{
				Class ihClass = ih.GetType();
				Class caller = Reflection.CallerClass;
				if (ReflectUtil.needsPackageAccessCheck(caller.ClassLoader, ihClass.ClassLoader))
				{
					ReflectUtil.checkPackageAccess(ihClass);
				}
			}

			return ih;
		}

//JAVA TO C# CONVERTER TODO TASK: Replace 'unknown' with the appropriate dll name:
		[DllImport("unknown")]
		private static extern Class defineClass0(ClassLoader loader, String name, sbyte[] b, int off, int len);
	}

}